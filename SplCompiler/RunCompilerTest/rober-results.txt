-- flex Errors -------------------------------- 
-- gcc -DPRINT Errors -------------------------------- 
-- bison -t Errors -------------------------------- 
-- gcc -DYYDEBUG Errors -------------------------------- 
-- gcc -DDEBUG Errors -------------------------------- 
-- gcc Errors -------------------------------- 
-- Output -------------------------------- 
--31/10/2019----------------------------------------------------- 
Lexical Tokens for a.spl 
-- 0:49:45.69----------------------------------------------------- 
TOKEN: IDENTIFIER (spl_ProgA) 
TOKEN: COLON (:) 
TOKEN: CODE 
TOKEN: WRITE 
TOKEN: OPEN_BRACKET (() 
TOKEN: CHARACTER_CONSTANT ('h') 
TOKEN: COMMA (,) 
TOKEN: CHARACTER_CONSTANT ('e') 
TOKEN: COMMA (,) 
TOKEN: CHARACTER_CONSTANT ('l') 
TOKEN: COMMA (,) 
TOKEN: CHARACTER_CONSTANT ('l') 
TOKEN: COMMA (,) 
TOKEN: CHARACTER_CONSTANT ('o') 
TOKEN: CLOSE_BRACKET ()) 
TOKEN: SEMI_COLON (;) 
TOKEN: NEWLINE 
TOKEN: ENDP 
TOKEN: IDENTIFIER (spl_ProgA) 
TOKEN: PERIOD (.) 
--31/10/2019----------------------------------------------------- 
Lexical Tokens for b.spl 
-- 0:49:46.27----------------------------------------------------- 
TOKEN: IDENTIFIER (spl_ProgB) 
TOKEN: COLON (:) 
TOKEN: DECLARATIONS 
TOKEN: IDENTIFIER (spl_a) 
TOKEN: COMMA (,) 
TOKEN: IDENTIFIER (spl_b) 
TOKEN: OF 
TOKEN: TYPE 
TOKEN: TYPE_INTEGER 
TOKEN: SEMI_COLON (;) 
TOKEN: IDENTIFIER (spl_c) 
TOKEN: OF 
TOKEN: TYPE 
TOKEN: TYPE_CHARACTER 
TOKEN: SEMI_COLON (;) 
TOKEN: IDENTIFIER (spl_d) 
TOKEN: COMMA (,) 
TOKEN: IDENTIFIER (spl_e) 
TOKEN: OF 
TOKEN: TYPE 
TOKEN: TYPE_REAL 
TOKEN: SEMI_COLON (;) 
TOKEN: CODE 
TOKEN: READ 
TOKEN: OPEN_BRACKET (() 
TOKEN: IDENTIFIER (spl_a) 
TOKEN: CLOSE_BRACKET ()) 
TOKEN: SEMI_COLON (;) 
TOKEN: READ 
TOKEN: OPEN_BRACKET (() 
TOKEN: IDENTIFIER (spl_b) 
TOKEN: CLOSE_BRACKET ()) 
TOKEN: SEMI_COLON (;) 
TOKEN: IF 
TOKEN: IDENTIFIER (spl_a) 
TOKEN: MORE_THAN_OPERATOR (>) 
TOKEN: IDENTIFIER (spl_b) 
TOKEN: THEN 
TOKEN: WRITE 
TOKEN: OPEN_BRACKET (() 
TOKEN: CHARACTER_CONSTANT ('A') 
TOKEN: CLOSE_BRACKET ()) 
TOKEN: ELSE 
TOKEN: WRITE 
TOKEN: OPEN_BRACKET (() 
TOKEN: CHARACTER_CONSTANT ('B') 
TOKEN: CLOSE_BRACKET ()) 
TOKEN: ENDIF 
TOKEN: SEMI_COLON (;) 
TOKEN: NEWLINE 
TOKEN: SEMI_COLON (;) 
TOKEN: READ 
TOKEN: OPEN_BRACKET (() 
TOKEN: IDENTIFIER (spl_d) 
TOKEN: CLOSE_BRACKET ()) 
TOKEN: SEMI_COLON (;) 
TOKEN: IDENTIFIER (spl_d) 
TOKEN: MULTIPULCATION_OPERATOR (*) 
TOKEN: REAL (2.3) 
TOKEN: ASSIGNMENT_OPERATOR (->) 
TOKEN: IDENTIFIER (spl_e) 
TOKEN: SEMI_COLON (;) 
TOKEN: WRITE 
TOKEN: OPEN_BRACKET (() 
TOKEN: IDENTIFIER (spl_e) 
TOKEN: CLOSE_BRACKET ()) 
TOKEN: SEMI_COLON (;) 
TOKEN: NEWLINE 
TOKEN: SEMI_COLON (;) 
TOKEN: READ 
TOKEN: OPEN_BRACKET (() 
TOKEN: IDENTIFIER (spl_c) 
TOKEN: CLOSE_BRACKET ()) 
TOKEN: SEMI_COLON (;) 
TOKEN: WRITE 
TOKEN: OPEN_BRACKET (() 
TOKEN: IDENTIFIER (spl_c) 
TOKEN: CLOSE_BRACKET ()) 
TOKEN: SEMI_COLON (;) 
TOKEN: NEWLINE 
TOKEN: ENDP 
TOKEN: IDENTIFIER (spl_ProgB) 
TOKEN: PERIOD (.) 
--31/10/2019----------------------------------------------------- 
Lexical Tokens for c.spl 
-- 0:49:46.75----------------------------------------------------- 
TOKEN: IDENTIFIER (spl_Prog3) 
TOKEN: COLON (:) 
TOKEN: DECLARATIONS 
TOKEN: IDENTIFIER (spl_a) 
TOKEN: OF 
TOKEN: TYPE 
TOKEN: TYPE_INTEGER 
TOKEN: SEMI_COLON (;) 
TOKEN: CODE 
TOKEN: FOR 
TOKEN: IDENTIFIER (spl_a) 
TOKEN: IS 
TOKEN: UNSIGNED_INTEGER (1) 
TOKEN: BY 
TOKEN: UNSIGNED_INTEGER (1) 
TOKEN: TO 
TOKEN: UNSIGNED_INTEGER (13) 
TOKEN: DO 
TOKEN: IF 
TOKEN: NOT 
TOKEN: IDENTIFIER (spl_a) 
TOKEN: EQUALITY_OPERATOR (=) 
TOKEN: UNSIGNED_INTEGER (7) 
TOKEN: THEN 
TOKEN: WRITE 
TOKEN: OPEN_BRACKET (() 
TOKEN: IDENTIFIER (spl_a) 
TOKEN: CLOSE_BRACKET ()) 
TOKEN: SEMI_COLON (;) 
TOKEN: NEWLINE 
TOKEN: ENDIF 
TOKEN: ENDFOR 
TOKEN: SEMI_COLON (;) 
TOKEN: UNSIGNED_INTEGER (0) 
TOKEN: ASSIGNMENT_OPERATOR (->) 
TOKEN: IDENTIFIER (spl_a) 
TOKEN: SEMI_COLON (;) 
TOKEN: DO 
TOKEN: IDENTIFIER (spl_a) 
TOKEN: ADD_OPERATOR (+) 
TOKEN: UNSIGNED_INTEGER (1) 
TOKEN: ASSIGNMENT_OPERATOR (->) 
TOKEN: IDENTIFIER (spl_a) 
TOKEN: SEMI_COLON (;) 
TOKEN: IF 
TOKEN: NOT 
TOKEN: IDENTIFIER (spl_a) 
TOKEN: EQUALITY_OPERATOR (=) 
TOKEN: UNSIGNED_INTEGER (6) 
TOKEN: AND 
TOKEN: IDENTIFIER (spl_a) 
TOKEN: NOT_EQUAL_TO_OPERATOR (<>) 
TOKEN: UNSIGNED_INTEGER (8) 
TOKEN: THEN 
TOKEN: WRITE 
TOKEN: OPEN_BRACKET (() 
TOKEN: IDENTIFIER (spl_a) 
TOKEN: CLOSE_BRACKET ()) 
TOKEN: SEMI_COLON (;) 
TOKEN: NEWLINE 
TOKEN: ENDIF 
TOKEN: WHILE 
TOKEN: IDENTIFIER (spl_a) 
TOKEN: LESS_THAN_OPERATOR (<) 
TOKEN: UNSIGNED_INTEGER (14) 
TOKEN: ENDDO 
TOKEN: SEMI_COLON (;) 
TOKEN: UNSIGNED_INTEGER (0) 
TOKEN: ASSIGNMENT_OPERATOR (->) 
TOKEN: IDENTIFIER (spl_a) 
TOKEN: SEMI_COLON (;) 
TOKEN: WHILE 
TOKEN: IDENTIFIER (spl_a) 
TOKEN: LESS_THAN_OPERATOR (<) 
TOKEN: UNSIGNED_INTEGER (12) 
TOKEN: DO 
TOKEN: WRITE 
TOKEN: OPEN_BRACKET (() 
TOKEN: IDENTIFIER (spl_a) 
TOKEN: CLOSE_BRACKET ()) 
TOKEN: SEMI_COLON (;) 
TOKEN: IDENTIFIER (spl_a) 
TOKEN: ADD_OPERATOR (+) 
TOKEN: UNSIGNED_INTEGER (1) 
TOKEN: ASSIGNMENT_OPERATOR (->) 
TOKEN: IDENTIFIER (spl_a) 
TOKEN: ENDWHILE 
TOKEN: SEMI_COLON (;) 
TOKEN: NEWLINE 
TOKEN: ENDP 
TOKEN: IDENTIFIER (spl_Prog3) 
TOKEN: PERIOD (.) 
--31/10/2019----------------------------------------------------- 
Lexical Tokens for d.spl 
-- 0:49:47.22----------------------------------------------------- 
TOKEN: IDENTIFIER (spl_Prog4D) 
TOKEN: COLON (:) 
TOKEN: DECLARATIONS 
TOKEN: IDENTIFIER (spl_r1) 
TOKEN: COMMA (,) 
TOKEN: IDENTIFIER (spl_r2) 
TOKEN: COMMA (,) 
TOKEN: IDENTIFIER (spl_r3) 
TOKEN: OF 
TOKEN: TYPE 
TOKEN: TYPE_REAL 
TOKEN: SEMI_COLON (;) 
TOKEN: CODE 
TOKEN: REAL (-2.4) 
TOKEN: ASSIGNMENT_OPERATOR (->) 
TOKEN: IDENTIFIER (spl_r1) 
TOKEN: SEMI_COLON (;) 
TOKEN: REAL (-34.989) 
TOKEN: ASSIGNMENT_OPERATOR (->) 
TOKEN: IDENTIFIER (spl_r2) 
TOKEN: SEMI_COLON (;) 
TOKEN: IDENTIFIER (spl_r1) 
TOKEN: MULTIPULCATION_OPERATOR (*) 
TOKEN: IDENTIFIER (spl_r2) 
TOKEN: DIVISION_OPERATOR (/) 
TOKEN: REAL (7.4) 
TOKEN: ASSIGNMENT_OPERATOR (->) 
TOKEN: IDENTIFIER (spl_r3) 
TOKEN: SEMI_COLON (;) 
TOKEN: WRITE 
TOKEN: OPEN_BRACKET (() 
TOKEN: IDENTIFIER (spl_r3) 
TOKEN: CLOSE_BRACKET ()) 
TOKEN: SEMI_COLON (;) 
TOKEN: NEWLINE 
TOKEN: SEMI_COLON (;) 
TOKEN: READ 
TOKEN: OPEN_BRACKET (() 
TOKEN: IDENTIFIER (spl_r1) 
TOKEN: CLOSE_BRACKET ()) 
TOKEN: SEMI_COLON (;) 
TOKEN: IDENTIFIER (spl_r1) 
TOKEN: ADD_OPERATOR (+) 
TOKEN: IDENTIFIER (spl_r3) 
TOKEN: ASSIGNMENT_OPERATOR (->) 
TOKEN: IDENTIFIER (spl_r3) 
TOKEN: SEMI_COLON (;) 
TOKEN: WRITE 
TOKEN: OPEN_BRACKET (() 
TOKEN: IDENTIFIER (spl_r3) 
TOKEN: CLOSE_BRACKET ()) 
TOKEN: SEMI_COLON (;) 
TOKEN: NEWLINE 
TOKEN: ENDP 
TOKEN: IDENTIFIER (spl_Prog4D) 
TOKEN: PERIOD (.) 
--31/10/2019----------------------------------------------------- 
Lexical Tokens for e.spl 
-- 0:49:47.70----------------------------------------------------- 
TOKEN: IDENTIFIER (spl_ProgV) 
TOKEN: COLON (:) 
TOKEN: DECLARATIONS 
TOKEN: IDENTIFIER (spl_integer) 
TOKEN: COMMA (,) 
TOKEN: IDENTIFIER (spl_i) 
TOKEN: OF 
TOKEN: TYPE 
TOKEN: TYPE_INTEGER 
TOKEN: SEMI_COLON (;) 
TOKEN: CODE 
TOKEN: READ 
TOKEN: OPEN_BRACKET (() 
TOKEN: IDENTIFIER (spl_integer) 
TOKEN: CLOSE_BRACKET ()) 
TOKEN: SEMI_COLON (;) 
TOKEN: IF 
TOKEN: IDENTIFIER (spl_integer) 
TOKEN: LESS_EQUAL_TO_OPERATOR (<=) 
TOKEN: UNSIGNED_INTEGER (5) 
TOKEN: OR 
TOKEN: IDENTIFIER (spl_integer) 
TOKEN: MORE_EQUAL_TO_OPERATOR (>=) 
TOKEN: UNSIGNED_INTEGER (12) 
TOKEN: THEN 
TOKEN: WRITE 
TOKEN: OPEN_BRACKET (() 
TOKEN: IDENTIFIER (spl_integer) 
TOKEN: CLOSE_BRACKET ()) 
TOKEN: ENDIF 
TOKEN: SEMI_COLON (;) 
TOKEN: WRITE 
TOKEN: OPEN_BRACKET (() 
TOKEN: OPEN_BRACKET (() 
TOKEN: UNSIGNED_INTEGER (36) 
TOKEN: SUBTRACT_OPERATOR (-) 
TOKEN: UNSIGNED_INTEGER (1) 
TOKEN: CLOSE_BRACKET ()) 
TOKEN: CLOSE_BRACKET ()) 
TOKEN: SEMI_COLON (;) 
TOKEN: NEWLINE 
TOKEN: SEMI_COLON (;) 
TOKEN: FOR 
TOKEN: IDENTIFIER (spl_integer) 
TOKEN: IS 
TOKEN: SUBTRACT_OPERATOR (-) 
TOKEN: UNSIGNED_INTEGER (1) 
TOKEN: BY 
TOKEN: SUBTRACT_OPERATOR (-) 
TOKEN: UNSIGNED_INTEGER (1) 
TOKEN: TO 
TOKEN: SUBTRACT_OPERATOR (-) 
TOKEN: UNSIGNED_INTEGER (5) 
TOKEN: DO 
TOKEN: WRITE 
TOKEN: OPEN_BRACKET (() 
TOKEN: IDENTIFIER (spl_integer) 
TOKEN: CLOSE_BRACKET ()) 
TOKEN: SEMI_COLON (;) 
TOKEN: NEWLINE 
TOKEN: ENDFOR 
TOKEN: SEMI_COLON (;) 
TOKEN: SUBTRACT_OPERATOR (-) 
TOKEN: UNSIGNED_INTEGER (1) 
TOKEN: ASSIGNMENT_OPERATOR (->) 
TOKEN: IDENTIFIER (spl_i) 
TOKEN: SEMI_COLON (;) 
TOKEN: FOR 
TOKEN: IDENTIFIER (spl_integer) 
TOKEN: IS 
TOKEN: IDENTIFIER (spl_i) 
TOKEN: MULTIPULCATION_OPERATOR (*) 
TOKEN: IDENTIFIER (spl_i) 
TOKEN: MULTIPULCATION_OPERATOR (*) 
TOKEN: IDENTIFIER (spl_i) 
TOKEN: BY 
TOKEN: IDENTIFIER (spl_i) 
TOKEN: MULTIPULCATION_OPERATOR (*) 
TOKEN: IDENTIFIER (spl_i) 
TOKEN: MULTIPULCATION_OPERATOR (*) 
TOKEN: IDENTIFIER (spl_i) 
TOKEN: MULTIPULCATION_OPERATOR (*) 
TOKEN: IDENTIFIER (spl_i) 
TOKEN: MULTIPULCATION_OPERATOR (*) 
TOKEN: IDENTIFIER (spl_i) 
TOKEN: TO 
TOKEN: IDENTIFIER (spl_i) 
TOKEN: MULTIPULCATION_OPERATOR (*) 
TOKEN: IDENTIFIER (spl_i) 
TOKEN: MULTIPULCATION_OPERATOR (*) 
TOKEN: OPEN_BRACKET (() 
TOKEN: IDENTIFIER (spl_i) 
TOKEN: ADD_OPERATOR (+) 
TOKEN: IDENTIFIER (spl_i) 
TOKEN: ADD_OPERATOR (+) 
TOKEN: IDENTIFIER (spl_i) 
TOKEN: ADD_OPERATOR (+) 
TOKEN: IDENTIFIER (spl_i) 
TOKEN: ADD_OPERATOR (+) 
TOKEN: IDENTIFIER (spl_i) 
TOKEN: CLOSE_BRACKET ()) 
TOKEN: DO 
TOKEN: WRITE 
TOKEN: OPEN_BRACKET (() 
TOKEN: IDENTIFIER (spl_integer) 
TOKEN: CLOSE_BRACKET ()) 
TOKEN: SEMI_COLON (;) 
TOKEN: NEWLINE 
TOKEN: ENDFOR 
TOKEN: ENDP 
TOKEN: IDENTIFIER (spl_ProgV) 
TOKEN: PERIOD (.) 
--31/10/2019----------------------------------------------------- 
Parse debug output for a.spl 
-- 0:49:49.44----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reading a token: Next token is token COLON ()
Shifting token COLON ()
Entering state 3
Reading a token: Next token is token CODE ()
Shifting token CODE ()
Entering state 6
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 52
Reading a token: Next token is token CHARACTER_CONSTANT ()
Shifting token CHARACTER_CONSTANT ()
Entering state 21
Reducing stack by rule 35 (line 367):
   $1 = token CHARACTER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 17 52
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 17 52
Entering state 80
Reducing stack by rule 38 (line 380):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 6 17 52
Entering state 81
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 103
Reading a token: Next token is token CHARACTER_CONSTANT ()
Shifting token CHARACTER_CONSTANT ()
Entering state 21
Reducing stack by rule 35 (line 367):
   $1 = token CHARACTER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 17 52 81 103
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 17 52 81 103
Entering state 111
Reducing stack by rule 39 (line 383):
   $1 = nterm output_list ()
   $2 = token COMMA ()
   $3 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 6 17 52
Entering state 81
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 103
Reading a token: Next token is token CHARACTER_CONSTANT ()
Shifting token CHARACTER_CONSTANT ()
Entering state 21
Reducing stack by rule 35 (line 367):
   $1 = token CHARACTER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 17 52 81 103
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 17 52 81 103
Entering state 111
Reducing stack by rule 39 (line 383):
   $1 = nterm output_list ()
   $2 = token COMMA ()
   $3 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 6 17 52
Entering state 81
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 103
Reading a token: Next token is token CHARACTER_CONSTANT ()
Shifting token CHARACTER_CONSTANT ()
Entering state 21
Reducing stack by rule 35 (line 367):
   $1 = token CHARACTER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 17 52 81 103
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 17 52 81 103
Entering state 111
Reducing stack by rule 39 (line 383):
   $1 = nterm output_list ()
   $2 = token COMMA ()
   $3 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 6 17 52
Entering state 81
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 103
Reading a token: Next token is token CHARACTER_CONSTANT ()
Shifting token CHARACTER_CONSTANT ()
Entering state 21
Reducing stack by rule 35 (line 367):
   $1 = token CHARACTER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 6 17 52 81 103
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 6 17 52 81 103
Entering state 111
Reducing stack by rule 39 (line 383):
   $1 = nterm output_list ()
   $2 = token COMMA ()
   $3 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 6 17 52
Entering state 81
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 102
Reducing stack by rule 36 (line 372):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6
Entering state 26
Reducing stack by rule 12 (line 280):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6
Entering state 25
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 16
Reducing stack by rule 37 (line 375):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 6 25 56
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 6 25 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 6
Entering state 25
Reading a token: Next token is token ENDP ()
Reducing stack by rule 3 (line 231):
   $1 = token CODE ()
   $2 = nterm statement_list ()
-> $$ = nterm block ()
Stack now 0 1 3
Entering state 7
Next token is token ENDP ()
Shifting token ENDP ()
Entering state 39
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 62
Reading a token: Next token is token PERIOD ()
Shifting token PERIOD ()
Entering state 90
Reducing stack by rule 1 (line 196):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm block ()
   $4 = token ENDP ()
   $5 = token IDENTIFIER ()
   $6 = token PERIOD ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
#include <stdio.h>

void _spl_flush_stdin()
{
	char c = -1;
	do
	{
		c = getchar();
	} while (c != '\n' && c != ' ' && c != EOF);
}

void spl_ProgA()
{
	printf("hello");
	printf("\n");
}

int main()
{
	spl_ProgA();
	return 0;
}
--31/10/2019----------------------------------------------------- 
Parse debug output for b.spl 
-- 0:49:49.71----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reading a token: Next token is token COLON ()
Shifting token COLON ()
Entering state 3
Reading a token: Next token is token DECLARATIONS ()
Shifting token DECLARATIONS ()
Entering state 5
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 8
Reducing stack by rule 7 (line 258):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier_list ()
Stack now 0 1 3 5
Entering state 11
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 43
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 8 (line 261):
   $1 = nterm identifier_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
-> $$ = nterm identifier_list ()
Stack now 0 1 3 5
Entering state 11
Reading a token: Next token is token OF ()
Shifting token OF ()
Entering state 42
Reading a token: Next token is token TYPE ()
Shifting token TYPE ()
Entering state 64
Reading a token: Next token is token TYPE_INTEGER ()
Shifting token TYPE_INTEGER ()
Entering state 92
Reducing stack by rule 10 (line 270):
   $1 = token TYPE_INTEGER ()
-> $$ = nterm type ()
Stack now 0 1 3 5 11 42 64
Entering state 94
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 105
Reducing stack by rule 6 (line 244):
   $1 = nterm identifier_list ()
   $2 = token OF ()
   $3 = token TYPE ()
   $4 = nterm type ()
   $5 = token SEMI_COLON ()
-> $$ = nterm declaration ()
Stack now 0 1 3 5
Entering state 10
Reducing stack by rule 4 (line 236):
   $1 = nterm declaration ()
-> $$ = nterm declaration_block ()
Stack now 0 1 3 5
Entering state 9
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 8
Reducing stack by rule 7 (line 258):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier_list ()
Stack now 0 1 3 5 9
Entering state 11
Reading a token: Next token is token OF ()
Shifting token OF ()
Entering state 42
Reading a token: Next token is token TYPE ()
Shifting token TYPE ()
Entering state 64
Reading a token: Next token is token TYPE_CHARACTER ()
Shifting token TYPE_CHARACTER ()
Entering state 91
Reducing stack by rule 9 (line 266):
   $1 = token TYPE_CHARACTER ()
-> $$ = nterm type ()
Stack now 0 1 3 5 9 11 42 64
Entering state 94
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 105
Reducing stack by rule 6 (line 244):
   $1 = nterm identifier_list ()
   $2 = token OF ()
   $3 = token TYPE ()
   $4 = nterm type ()
   $5 = token SEMI_COLON ()
-> $$ = nterm declaration ()
Stack now 0 1 3 5 9
Entering state 41
Reducing stack by rule 5 (line 239):
   $1 = nterm declaration_block ()
   $2 = nterm declaration ()
-> $$ = nterm declaration_block ()
Stack now 0 1 3 5
Entering state 9
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 8
Reducing stack by rule 7 (line 258):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier_list ()
Stack now 0 1 3 5 9
Entering state 11
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 43
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 8 (line 261):
   $1 = nterm identifier_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
-> $$ = nterm identifier_list ()
Stack now 0 1 3 5 9
Entering state 11
Reading a token: Next token is token OF ()
Shifting token OF ()
Entering state 42
Reading a token: Next token is token TYPE ()
Shifting token TYPE ()
Entering state 64
Reading a token: Next token is token TYPE_REAL ()
Shifting token TYPE_REAL ()
Entering state 93
Reducing stack by rule 11 (line 274):
   $1 = token TYPE_REAL ()
-> $$ = nterm type ()
Stack now 0 1 3 5 9 11 42 64
Entering state 94
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 105
Reducing stack by rule 6 (line 244):
   $1 = nterm identifier_list ()
   $2 = token OF ()
   $3 = token TYPE ()
   $4 = nterm type ()
   $5 = token SEMI_COLON ()
-> $$ = nterm declaration ()
Stack now 0 1 3 5 9
Entering state 41
Reducing stack by rule 5 (line 239):
   $1 = nterm declaration_block ()
   $2 = nterm declaration ()
-> $$ = nterm declaration_block ()
Stack now 0 1 3 5
Entering state 9
Reading a token: Next token is token CODE ()
Shifting token CODE ()
Entering state 40
Reading a token: Next token is token READ ()
Shifting token READ ()
Entering state 18
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 53
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 104
Reducing stack by rule 46 (line 408):
   $1 = token READ ()
   $2 = token OPEN_BRACKET ()
   $3 = token IDENTIFIER ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm read_statement ()
Stack now 0 1 3 5 9 40
Entering state 33
Reducing stack by rule 16 (line 295):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40
Entering state 26
Reducing stack by rule 12 (line 280):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token READ ()
Shifting token READ ()
Entering state 18
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 53
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 104
Reducing stack by rule 46 (line 408):
   $1 = token READ ()
   $2 = token OPEN_BRACKET ()
   $3 = token IDENTIFIER ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm read_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 33
Reducing stack by rule 16 (line 295):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 12
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 12
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 12
Entering state 30
Reading a token: Next token is token MORE_THAN_OPERATOR ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 12
Entering state 45
Next token is token MORE_THAN_OPERATOR ()
Shifting token MORE_THAN_OPERATOR ()
Entering state 70
Reducing stack by rule 43 (line 397):
   $1 = token MORE_THAN_OPERATOR ()
-> $$ = nterm comparator ()
Stack now 0 1 3 5 9 40 63 56 12 45
Entering state 73
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 12 45 73
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 12 45 73
Entering state 30
Reading a token: Next token is token THEN ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 12 45 73
Entering state 95
Next token is token THEN ()
Reducing stack by rule 54 (line 442):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm comparison ()
Stack now 0 1 3 5 9 40 63 56 12
Entering state 48
Reducing stack by rule 52 (line 434):
   $1 = nterm comparison ()
-> $$ = nterm logical ()
Stack now 0 1 3 5 9 40 63 56 12
Entering state 47
Reducing stack by rule 49 (line 425):
   $1 = nterm logical ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 40 63 56 12
Entering state 46
Next token is token THEN ()
Shifting token THEN ()
Entering state 74
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 52
Reading a token: Next token is token CHARACTER_CONSTANT ()
Shifting token CHARACTER_CONSTANT ()
Entering state 21
Reducing stack by rule 35 (line 367):
   $1 = token CHARACTER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 63 56 12 46 74 17 52
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 12 46 74 17 52
Entering state 80
Reducing stack by rule 38 (line 380):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 40 63 56 12 46 74 17 52
Entering state 81
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 102
Reducing stack by rule 36 (line 372):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 63 56 12 46 74
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56 12 46 74
Entering state 26
Reducing stack by rule 12 (line 280):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40 63 56 12 46 74
Entering state 96
Reading a token: Next token is token ELSE ()
Shifting token ELSE ()
Entering state 106
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 52
Reading a token: Next token is token CHARACTER_CONSTANT ()
Shifting token CHARACTER_CONSTANT ()
Entering state 21
Reducing stack by rule 35 (line 367):
   $1 = token CHARACTER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 63 56 12 46 74 96 106 17 52
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 12 46 74 96 106 17 52
Entering state 80
Reducing stack by rule 38 (line 380):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 40 63 56 12 46 74 96 106 17 52
Entering state 81
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 102
Reducing stack by rule 36 (line 372):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 63 56 12 46 74 96 106
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56 12 46 74 96 106
Entering state 26
Reducing stack by rule 12 (line 280):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40 63 56 12 46 74 96 106
Entering state 112
Reading a token: Next token is token ENDIF ()
Shifting token ENDIF ()
Entering state 114
Reducing stack by rule 48 (line 420):
   $1 = token IF ()
   $2 = nterm conditional ()
   $3 = token THEN ()
   $4 = nterm statement_list ()
   $5 = token ELSE ()
   $6 = nterm statement_list ()
   $7 = token ENDIF ()
-> $$ = nterm if_else_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 35
Reducing stack by rule 18 (line 301):
   $1 = nterm if_else_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 16
Reducing stack by rule 37 (line 375):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token READ ()
Shifting token READ ()
Entering state 18
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 53
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 104
Reducing stack by rule 46 (line 408):
   $1 = token READ ()
   $2 = token OPEN_BRACKET ()
   $3 = token IDENTIFIER ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm read_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 33
Reducing stack by rule 16 (line 295):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56
Entering state 30
Reading a token: Next token is token MULTIPULCATION_OPERATOR ()
Shifting token MULTIPULCATION_OPERATOR ()
Entering state 61
Reading a token: Next token is token REAL ()
Shifting token REAL ()
Entering state 23
Reducing stack by rule 32 (line 357):
   $1 = token REAL ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 63 56 30 61
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 30 61
Entering state 89
Reducing stack by rule 29 (line 346):
   $1 = nterm term ()
   $2 = token MULTIPULCATION_OPERATOR ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56
Entering state 30
Reading a token: Next token is token ASSIGNMENT_OPERATOR ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56
Entering state 29
Next token is token ASSIGNMENT_OPERATOR ()
Shifting token ASSIGNMENT_OPERATOR ()
Entering state 57
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 85
Reducing stack by rule 22 (line 315):
   $1 = nterm expression ()
   $2 = token ASSIGNMENT_OPERATOR ()
   $3 = token IDENTIFIER ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 27
Reducing stack by rule 14 (line 289):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 52
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 17 52
Entering state 80
Reducing stack by rule 38 (line 380):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 40 63 56 17 52
Entering state 81
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 102
Reducing stack by rule 36 (line 372):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 16
Reducing stack by rule 37 (line 375):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token READ ()
Shifting token READ ()
Entering state 18
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 53
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 104
Reducing stack by rule 46 (line 408):
   $1 = token READ ()
   $2 = token OPEN_BRACKET ()
   $3 = token IDENTIFIER ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm read_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 33
Reducing stack by rule 16 (line 295):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 52
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 17 52
Entering state 80
Reducing stack by rule 38 (line 380):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 40 63 56 17 52
Entering state 81
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 102
Reducing stack by rule 36 (line 372):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 16
Reducing stack by rule 37 (line 375):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token ENDP ()
Reducing stack by rule 2 (line 228):
   $1 = token DECLARATIONS ()
   $2 = nterm declaration_block ()
   $3 = token CODE ()
   $4 = nterm statement_list ()
-> $$ = nterm block ()
Stack now 0 1 3
Entering state 7
Next token is token ENDP ()
Shifting token ENDP ()
Entering state 39
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 62
Reading a token: Next token is token PERIOD ()
Shifting token PERIOD ()
Entering state 90
Reducing stack by rule 1 (line 196):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm block ()
   $4 = token ENDP ()
   $5 = token IDENTIFIER ()
   $6 = token PERIOD ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
#include <stdio.h>

void _spl_flush_stdin()
{
	char c = -1;
	do
	{
		c = getchar();
	} while (c != '\n' && c != ' ' && c != EOF);
}

void spl_ProgB()
{
	int spl_a, spl_b;
	char spl_c;
	double spl_d, spl_e;

	scanf("%d", &spl_a);
	_spl_flush_stdin();
	scanf("%d", &spl_b);
	_spl_flush_stdin();
	if (spl_a > spl_b)
	{
		printf("A");
	}
	else
	{
		printf("B");
	}
	printf("\n");
	scanf("%lf", &spl_d);
	_spl_flush_stdin();
	spl_e = (spl_d * 2.300000);
	printf("%lf", spl_e);
	printf("\n");
	scanf("%c", &spl_c);
	_spl_flush_stdin();
	printf("%c", spl_c);
	printf("\n");
}

int main()
{
	spl_ProgB();
	return 0;
}
--31/10/2019----------------------------------------------------- 
Parse debug output for c.spl 
-- 0:49:49.96----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reading a token: Next token is token COLON ()
Shifting token COLON ()
Entering state 3
Reading a token: Next token is token DECLARATIONS ()
Shifting token DECLARATIONS ()
Entering state 5
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 8
Reducing stack by rule 7 (line 258):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier_list ()
Stack now 0 1 3 5
Entering state 11
Reading a token: Next token is token OF ()
Shifting token OF ()
Entering state 42
Reading a token: Next token is token TYPE ()
Shifting token TYPE ()
Entering state 64
Reading a token: Next token is token TYPE_INTEGER ()
Shifting token TYPE_INTEGER ()
Entering state 92
Reducing stack by rule 10 (line 270):
   $1 = token TYPE_INTEGER ()
-> $$ = nterm type ()
Stack now 0 1 3 5 11 42 64
Entering state 94
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 105
Reducing stack by rule 6 (line 244):
   $1 = nterm identifier_list ()
   $2 = token OF ()
   $3 = token TYPE ()
   $4 = nterm type ()
   $5 = token SEMI_COLON ()
-> $$ = nterm declaration ()
Stack now 0 1 3 5
Entering state 10
Reducing stack by rule 4 (line 236):
   $1 = nterm declaration ()
-> $$ = nterm declaration_block ()
Stack now 0 1 3 5
Entering state 9
Reading a token: Next token is token CODE ()
Shifting token CODE ()
Entering state 40
Reading a token: Next token is token FOR ()
Shifting token FOR ()
Entering state 15
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 51
Reading a token: Next token is token IS ()
Shifting token IS ()
Entering state 79
Reading a token: Next token is token UNSIGNED_INTEGER ()
Shifting token UNSIGNED_INTEGER ()
Entering state 22
Reducing stack by rule 33 (line 360):
   $1 = token UNSIGNED_INTEGER ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 15 51 79
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 15 51 79
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 15 51 79
Entering state 30
Reading a token: Next token is token BY ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 15 51 79
Entering state 101
Next token is token BY ()
Shifting token BY ()
Entering state 110
Reading a token: Next token is token UNSIGNED_INTEGER ()
Shifting token UNSIGNED_INTEGER ()
Entering state 22
Reducing stack by rule 33 (line 360):
   $1 = token UNSIGNED_INTEGER ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 15 51 79 101 110
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 15 51 79 101 110
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 15 51 79 101 110
Entering state 30
Reading a token: Next token is token TO ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 15 51 79 101 110
Entering state 113
Next token is token TO ()
Shifting token TO ()
Entering state 115
Reading a token: Next token is token UNSIGNED_INTEGER ()
Shifting token UNSIGNED_INTEGER ()
Entering state 22
Reducing stack by rule 33 (line 360):
   $1 = token UNSIGNED_INTEGER ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115
Entering state 30
Reading a token: Next token is token DO ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115
Entering state 116
Next token is token DO ()
Shifting token DO ()
Entering state 117
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 12
Reading a token: Next token is token NOT ()
Shifting token NOT ()
Entering state 44
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115 116 117 12 44
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115 116 117 12 44
Entering state 30
Reading a token: Next token is token EQUALITY_OPERATOR ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115 116 117 12 44
Entering state 45
Next token is token EQUALITY_OPERATOR ()
Shifting token EQUALITY_OPERATOR ()
Entering state 67
Reducing stack by rule 40 (line 388):
   $1 = token EQUALITY_OPERATOR ()
-> $$ = nterm comparator ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115 116 117 12 44 45
Entering state 73
Reading a token: Next token is token UNSIGNED_INTEGER ()
Shifting token UNSIGNED_INTEGER ()
Entering state 22
Reducing stack by rule 33 (line 360):
   $1 = token UNSIGNED_INTEGER ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115 116 117 12 44 45 73
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115 116 117 12 44 45 73
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115 116 117 12 44 45 73
Entering state 30
Reading a token: Next token is token THEN ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115 116 117 12 44 45 73
Entering state 95
Next token is token THEN ()
Reducing stack by rule 54 (line 442):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm comparison ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115 116 117 12 44
Entering state 66
Reducing stack by rule 53 (line 437):
   $1 = token NOT ()
   $2 = nterm comparison ()
-> $$ = nterm logical ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115 116 117 12
Entering state 47
Reducing stack by rule 49 (line 425):
   $1 = nterm logical ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115 116 117 12
Entering state 46
Next token is token THEN ()
Shifting token THEN ()
Entering state 74
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 52
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115 116 117 12 46 74 17 52
Entering state 80
Reducing stack by rule 38 (line 380):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115 116 117 12 46 74 17 52
Entering state 81
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 102
Reducing stack by rule 36 (line 372):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115 116 117 12 46 74
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115 116 117 12 46 74
Entering state 26
Reducing stack by rule 12 (line 280):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115 116 117 12 46 74
Entering state 96
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 16
Reducing stack by rule 37 (line 375):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115 116 117 12 46 74 96 56
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115 116 117 12 46 74 96 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115 116 117 12 46 74
Entering state 96
Reading a token: Next token is token ENDIF ()
Shifting token ENDIF ()
Entering state 107
Reducing stack by rule 47 (line 415):
   $1 = token IF ()
   $2 = nterm conditional ()
   $3 = token THEN ()
   $4 = nterm statement_list ()
   $5 = token ENDIF ()
-> $$ = nterm if_statement ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115 116 117
Entering state 34
Reducing stack by rule 17 (line 298):
   $1 = nterm if_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115 116 117
Entering state 26
Reducing stack by rule 12 (line 280):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40 15 51 79 101 110 113 115 116 117
Entering state 118
Reading a token: Next token is token ENDFOR ()
Shifting token ENDFOR ()
Entering state 119
Reducing stack by rule 55 (line 447):
   $1 = token FOR ()
   $2 = token IDENTIFIER ()
   $3 = token IS ()
   $4 = nterm expression ()
   $5 = token BY ()
   $6 = nterm expression ()
   $7 = token TO ()
   $8 = nterm expression ()
   $9 = token DO ()
   $10 = nterm statement_list ()
   $11 = token ENDFOR ()
-> $$ = nterm for_statement ()
Stack now 0 1 3 5 9 40
Entering state 36
Reducing stack by rule 19 (line 304):
   $1 = nterm for_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40
Entering state 26
Reducing stack by rule 12 (line 280):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token UNSIGNED_INTEGER ()
Shifting token UNSIGNED_INTEGER ()
Entering state 22
Reducing stack by rule 33 (line 360):
   $1 = token UNSIGNED_INTEGER ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 63 56
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56
Entering state 30
Reading a token: Next token is token ASSIGNMENT_OPERATOR ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56
Entering state 29
Next token is token ASSIGNMENT_OPERATOR ()
Shifting token ASSIGNMENT_OPERATOR ()
Entering state 57
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 85
Reducing stack by rule 22 (line 315):
   $1 = nterm expression ()
   $2 = token ASSIGNMENT_OPERATOR ()
   $3 = token IDENTIFIER ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 27
Reducing stack by rule 14 (line 289):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token DO ()
Shifting token DO ()
Entering state 13
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 13
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 13
Entering state 30
Reading a token: Next token is token ADD_OPERATOR ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 13
Entering state 29
Next token is token ADD_OPERATOR ()
Shifting token ADD_OPERATOR ()
Entering state 58
Reading a token: Next token is token UNSIGNED_INTEGER ()
Shifting token UNSIGNED_INTEGER ()
Entering state 22
Reducing stack by rule 33 (line 360):
   $1 = token UNSIGNED_INTEGER ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 63 56 13 29 58
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 13 29 58
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 13 29 58
Entering state 86
Reading a token: Next token is token ASSIGNMENT_OPERATOR ()
Reducing stack by rule 27 (line 338):
   $1 = nterm expression ()
   $2 = token ADD_OPERATOR ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 13
Entering state 29
Next token is token ASSIGNMENT_OPERATOR ()
Shifting token ASSIGNMENT_OPERATOR ()
Entering state 57
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 85
Reducing stack by rule 22 (line 315):
   $1 = nterm expression ()
   $2 = token ASSIGNMENT_OPERATOR ()
   $3 = token IDENTIFIER ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 5 9 40 63 56 13
Entering state 27
Reducing stack by rule 14 (line 289):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56 13
Entering state 26
Reducing stack by rule 12 (line 280):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40 63 56 13
Entering state 49
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 12
Reading a token: Next token is token NOT ()
Shifting token NOT ()
Entering state 44
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 44
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 44
Entering state 30
Reading a token: Next token is token EQUALITY_OPERATOR ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 44
Entering state 45
Next token is token EQUALITY_OPERATOR ()
Shifting token EQUALITY_OPERATOR ()
Entering state 67
Reducing stack by rule 40 (line 388):
   $1 = token EQUALITY_OPERATOR ()
-> $$ = nterm comparator ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 44 45
Entering state 73
Reading a token: Next token is token UNSIGNED_INTEGER ()
Shifting token UNSIGNED_INTEGER ()
Entering state 22
Reducing stack by rule 33 (line 360):
   $1 = token UNSIGNED_INTEGER ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 44 45 73
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 44 45 73
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 44 45 73
Entering state 30
Reading a token: Next token is token AND ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 44 45 73
Entering state 95
Next token is token AND ()
Reducing stack by rule 54 (line 442):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm comparison ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 44
Entering state 66
Reducing stack by rule 53 (line 437):
   $1 = token NOT ()
   $2 = nterm comparison ()
-> $$ = nterm logical ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12
Entering state 47
Reducing stack by rule 49 (line 425):
   $1 = nterm logical ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12
Entering state 46
Next token is token AND ()
Shifting token AND ()
Entering state 75
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 46 75
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 46 75
Entering state 30
Reading a token: Next token is token NOT_EQUAL_TO_OPERATOR ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 46 75
Entering state 45
Next token is token NOT_EQUAL_TO_OPERATOR ()
Shifting token NOT_EQUAL_TO_OPERATOR ()
Entering state 68
Reducing stack by rule 41 (line 391):
   $1 = token NOT_EQUAL_TO_OPERATOR ()
-> $$ = nterm comparator ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 46 75 45
Entering state 73
Reading a token: Next token is token UNSIGNED_INTEGER ()
Shifting token UNSIGNED_INTEGER ()
Entering state 22
Reducing stack by rule 33 (line 360):
   $1 = token UNSIGNED_INTEGER ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 46 75 45 73
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 46 75 45 73
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 46 75 45 73
Entering state 30
Reading a token: Next token is token THEN ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 46 75 45 73
Entering state 95
Next token is token THEN ()
Reducing stack by rule 54 (line 442):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm comparison ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 46 75
Entering state 48
Reducing stack by rule 52 (line 434):
   $1 = nterm comparison ()
-> $$ = nterm logical ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 46 75
Entering state 97
Reducing stack by rule 50 (line 427):
   $1 = nterm conditional ()
   $2 = token AND ()
   $3 = nterm logical ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12
Entering state 46
Next token is token THEN ()
Shifting token THEN ()
Entering state 74
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 52
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 46 74 17 52
Entering state 80
Reducing stack by rule 38 (line 380):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 46 74 17 52
Entering state 81
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 102
Reducing stack by rule 36 (line 372):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 46 74
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 46 74
Entering state 26
Reducing stack by rule 12 (line 280):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 46 74
Entering state 96
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 16
Reducing stack by rule 37 (line 375):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 46 74 96 56
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 46 74 96 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40 63 56 13 49 56 12 46 74
Entering state 96
Reading a token: Next token is token ENDIF ()
Shifting token ENDIF ()
Entering state 107
Reducing stack by rule 47 (line 415):
   $1 = token IF ()
   $2 = nterm conditional ()
   $3 = token THEN ()
   $4 = nterm statement_list ()
   $5 = token ENDIF ()
-> $$ = nterm if_statement ()
Stack now 0 1 3 5 9 40 63 56 13 49 56
Entering state 34
Reducing stack by rule 17 (line 298):
   $1 = nterm if_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56 13 49 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40 63 56 13
Entering state 49
Reading a token: Next token is token WHILE ()
Shifting token WHILE ()
Entering state 77
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 13 49 77
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 13 49 77
Entering state 30
Reading a token: Next token is token LESS_THAN_OPERATOR ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 13 49 77
Entering state 45
Next token is token LESS_THAN_OPERATOR ()
Shifting token LESS_THAN_OPERATOR ()
Entering state 69
Reducing stack by rule 42 (line 394):
   $1 = token LESS_THAN_OPERATOR ()
-> $$ = nterm comparator ()
Stack now 0 1 3 5 9 40 63 56 13 49 77 45
Entering state 73
Reading a token: Next token is token UNSIGNED_INTEGER ()
Shifting token UNSIGNED_INTEGER ()
Entering state 22
Reducing stack by rule 33 (line 360):
   $1 = token UNSIGNED_INTEGER ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 63 56 13 49 77 45 73
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 13 49 77 45 73
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 13 49 77 45 73
Entering state 30
Reading a token: Next token is token ENDDO ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 13 49 77 45 73
Entering state 95
Next token is token ENDDO ()
Reducing stack by rule 54 (line 442):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm comparison ()
Stack now 0 1 3 5 9 40 63 56 13 49 77
Entering state 48
Reducing stack by rule 52 (line 434):
   $1 = nterm comparison ()
-> $$ = nterm logical ()
Stack now 0 1 3 5 9 40 63 56 13 49 77
Entering state 47
Reducing stack by rule 49 (line 425):
   $1 = nterm logical ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 40 63 56 13 49 77
Entering state 99
Next token is token ENDDO ()
Shifting token ENDDO ()
Entering state 108
Reducing stack by rule 57 (line 459):
   $1 = token DO ()
   $2 = nterm statement_list ()
   $3 = token WHILE ()
   $4 = nterm conditional ()
   $5 = token ENDDO ()
-> $$ = nterm do_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 38
Reducing stack by rule 21 (line 310):
   $1 = nterm do_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token UNSIGNED_INTEGER ()
Shifting token UNSIGNED_INTEGER ()
Entering state 22
Reducing stack by rule 33 (line 360):
   $1 = token UNSIGNED_INTEGER ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 63 56
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56
Entering state 30
Reading a token: Next token is token ASSIGNMENT_OPERATOR ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56
Entering state 29
Next token is token ASSIGNMENT_OPERATOR ()
Shifting token ASSIGNMENT_OPERATOR ()
Entering state 57
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 85
Reducing stack by rule 22 (line 315):
   $1 = nterm expression ()
   $2 = token ASSIGNMENT_OPERATOR ()
   $3 = token IDENTIFIER ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 27
Reducing stack by rule 14 (line 289):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token WHILE ()
Shifting token WHILE ()
Entering state 14
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 14
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 14
Entering state 30
Reading a token: Next token is token LESS_THAN_OPERATOR ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 14
Entering state 45
Next token is token LESS_THAN_OPERATOR ()
Shifting token LESS_THAN_OPERATOR ()
Entering state 69
Reducing stack by rule 42 (line 394):
   $1 = token LESS_THAN_OPERATOR ()
-> $$ = nterm comparator ()
Stack now 0 1 3 5 9 40 63 56 14 45
Entering state 73
Reading a token: Next token is token UNSIGNED_INTEGER ()
Shifting token UNSIGNED_INTEGER ()
Entering state 22
Reducing stack by rule 33 (line 360):
   $1 = token UNSIGNED_INTEGER ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 63 56 14 45 73
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 14 45 73
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 14 45 73
Entering state 30
Reading a token: Next token is token DO ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 14 45 73
Entering state 95
Next token is token DO ()
Reducing stack by rule 54 (line 442):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm comparison ()
Stack now 0 1 3 5 9 40 63 56 14
Entering state 48
Reducing stack by rule 52 (line 434):
   $1 = nterm comparison ()
-> $$ = nterm logical ()
Stack now 0 1 3 5 9 40 63 56 14
Entering state 47
Reducing stack by rule 49 (line 425):
   $1 = nterm logical ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 40 63 56 14
Entering state 50
Next token is token DO ()
Shifting token DO ()
Entering state 78
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 52
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 14 50 78 17 52
Entering state 80
Reducing stack by rule 38 (line 380):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 40 63 56 14 50 78 17 52
Entering state 81
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 102
Reducing stack by rule 36 (line 372):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 63 56 14 50 78
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56 14 50 78
Entering state 26
Reducing stack by rule 12 (line 280):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40 63 56 14 50 78
Entering state 100
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 14 50 78 100 56
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 14 50 78 100 56
Entering state 30
Reading a token: Next token is token ADD_OPERATOR ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 14 50 78 100 56
Entering state 29
Next token is token ADD_OPERATOR ()
Shifting token ADD_OPERATOR ()
Entering state 58
Reading a token: Next token is token UNSIGNED_INTEGER ()
Shifting token UNSIGNED_INTEGER ()
Entering state 22
Reducing stack by rule 33 (line 360):
   $1 = token UNSIGNED_INTEGER ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 63 56 14 50 78 100 56 29 58
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 14 50 78 100 56 29 58
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 14 50 78 100 56 29 58
Entering state 86
Reading a token: Next token is token ASSIGNMENT_OPERATOR ()
Reducing stack by rule 27 (line 338):
   $1 = nterm expression ()
   $2 = token ADD_OPERATOR ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 14 50 78 100 56
Entering state 29
Next token is token ASSIGNMENT_OPERATOR ()
Shifting token ASSIGNMENT_OPERATOR ()
Entering state 57
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 85
Reducing stack by rule 22 (line 315):
   $1 = nterm expression ()
   $2 = token ASSIGNMENT_OPERATOR ()
   $3 = token IDENTIFIER ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 5 9 40 63 56 14 50 78 100 56
Entering state 27
Reducing stack by rule 14 (line 289):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56 14 50 78 100 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40 63 56 14 50 78
Entering state 100
Reading a token: Next token is token ENDWHILE ()
Shifting token ENDWHILE ()
Entering state 109
Reducing stack by rule 56 (line 454):
   $1 = token WHILE ()
   $2 = nterm conditional ()
   $3 = token DO ()
   $4 = nterm statement_list ()
   $5 = token ENDWHILE ()
-> $$ = nterm while_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 37
Reducing stack by rule 20 (line 307):
   $1 = nterm while_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 16
Reducing stack by rule 37 (line 375):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token ENDP ()
Reducing stack by rule 2 (line 228):
   $1 = token DECLARATIONS ()
   $2 = nterm declaration_block ()
   $3 = token CODE ()
   $4 = nterm statement_list ()
-> $$ = nterm block ()
Stack now 0 1 3
Entering state 7
Next token is token ENDP ()
Shifting token ENDP ()
Entering state 39
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 62
Reading a token: Next token is token PERIOD ()
Shifting token PERIOD ()
Entering state 90
Reducing stack by rule 1 (line 196):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm block ()
   $4 = token ENDP ()
   $5 = token IDENTIFIER ()
   $6 = token PERIOD ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
/*WARNING (9:17): spl_a is used before it has been assigned to, this will have unexpected consequences!*/
/*WARNING (10:18): spl_a is used before it has been assigned to, this will have unexpected consequences!*/
#include <stdio.h>

void _spl_flush_stdin()
{
	char c = -1;
	do
	{
		c = getchar();
	} while (c != '\n' && c != ' ' && c != EOF);
}

void spl_Prog3()
{
	int spl_a;

	int _spl_integer_by = 1;
	for (spl_a = 1; _spl_integer_by < 0 ? spl_a >= 13 : spl_a <= 13; spl_a += _spl_integer_by)
	{
		if (!(spl_a == 7))
		{
			printf("%d", spl_a);
			printf("\n");
		}
		_spl_integer_by = 1;
	}
	spl_a = 0;
	do
	{
		spl_a = (spl_a + 1);
		if (((!(spl_a == 6)) && (spl_a != 8)))
		{
			printf("%d", spl_a);
			printf("\n");
		}
	} while (spl_a < 14);
	spl_a = 0;
	while (spl_a < 12)
	{
		printf("%d", spl_a);
		spl_a = (spl_a + 1);
	};
	printf("\n");
}

int main()
{
	spl_Prog3();
	return 0;
}
/*WARNING (29:1): spl_a is declared and is assigned to but never used!*/
--31/10/2019----------------------------------------------------- 
Parse debug output for d.spl 
-- 0:49:50.24----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reading a token: Next token is token COLON ()
Shifting token COLON ()
Entering state 3
Reading a token: Next token is token DECLARATIONS ()
Shifting token DECLARATIONS ()
Entering state 5
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 8
Reducing stack by rule 7 (line 258):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier_list ()
Stack now 0 1 3 5
Entering state 11
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 43
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 8 (line 261):
   $1 = nterm identifier_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
-> $$ = nterm identifier_list ()
Stack now 0 1 3 5
Entering state 11
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 43
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 8 (line 261):
   $1 = nterm identifier_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
-> $$ = nterm identifier_list ()
Stack now 0 1 3 5
Entering state 11
Reading a token: Next token is token OF ()
Shifting token OF ()
Entering state 42
Reading a token: Next token is token TYPE ()
Shifting token TYPE ()
Entering state 64
Reading a token: Next token is token TYPE_REAL ()
Shifting token TYPE_REAL ()
Entering state 93
Reducing stack by rule 11 (line 274):
   $1 = token TYPE_REAL ()
-> $$ = nterm type ()
Stack now 0 1 3 5 11 42 64
Entering state 94
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 105
Reducing stack by rule 6 (line 244):
   $1 = nterm identifier_list ()
   $2 = token OF ()
   $3 = token TYPE ()
   $4 = nterm type ()
   $5 = token SEMI_COLON ()
-> $$ = nterm declaration ()
Stack now 0 1 3 5
Entering state 10
Reducing stack by rule 4 (line 236):
   $1 = nterm declaration ()
-> $$ = nterm declaration_block ()
Stack now 0 1 3 5
Entering state 9
Reading a token: Next token is token CODE ()
Shifting token CODE ()
Entering state 40
Reading a token: Next token is token REAL ()
Shifting token REAL ()
Entering state 23
Reducing stack by rule 32 (line 357):
   $1 = token REAL ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40
Entering state 30
Reading a token: Next token is token ASSIGNMENT_OPERATOR ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40
Entering state 29
Next token is token ASSIGNMENT_OPERATOR ()
Shifting token ASSIGNMENT_OPERATOR ()
Entering state 57
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 85
Reducing stack by rule 22 (line 315):
   $1 = nterm expression ()
   $2 = token ASSIGNMENT_OPERATOR ()
   $3 = token IDENTIFIER ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 5 9 40
Entering state 27
Reducing stack by rule 14 (line 289):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40
Entering state 26
Reducing stack by rule 12 (line 280):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token REAL ()
Shifting token REAL ()
Entering state 23
Reducing stack by rule 32 (line 357):
   $1 = token REAL ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 63 56
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56
Entering state 30
Reading a token: Next token is token ASSIGNMENT_OPERATOR ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56
Entering state 29
Next token is token ASSIGNMENT_OPERATOR ()
Shifting token ASSIGNMENT_OPERATOR ()
Entering state 57
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 85
Reducing stack by rule 22 (line 315):
   $1 = nterm expression ()
   $2 = token ASSIGNMENT_OPERATOR ()
   $3 = token IDENTIFIER ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 27
Reducing stack by rule 14 (line 289):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56
Entering state 30
Reading a token: Next token is token MULTIPULCATION_OPERATOR ()
Shifting token MULTIPULCATION_OPERATOR ()
Entering state 61
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 30 61
Entering state 89
Reducing stack by rule 29 (line 346):
   $1 = nterm term ()
   $2 = token MULTIPULCATION_OPERATOR ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56
Entering state 30
Reading a token: Next token is token DIVISION_OPERATOR ()
Shifting token DIVISION_OPERATOR ()
Entering state 60
Reading a token: Next token is token REAL ()
Shifting token REAL ()
Entering state 23
Reducing stack by rule 32 (line 357):
   $1 = token REAL ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 63 56 30 60
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 30 60
Entering state 88
Reducing stack by rule 30 (line 349):
   $1 = nterm term ()
   $2 = token DIVISION_OPERATOR ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56
Entering state 30
Reading a token: Next token is token ASSIGNMENT_OPERATOR ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56
Entering state 29
Next token is token ASSIGNMENT_OPERATOR ()
Shifting token ASSIGNMENT_OPERATOR ()
Entering state 57
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 85
Reducing stack by rule 22 (line 315):
   $1 = nterm expression ()
   $2 = token ASSIGNMENT_OPERATOR ()
   $3 = token IDENTIFIER ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 27
Reducing stack by rule 14 (line 289):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 52
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 17 52
Entering state 80
Reducing stack by rule 38 (line 380):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 40 63 56 17 52
Entering state 81
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 102
Reducing stack by rule 36 (line 372):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 16
Reducing stack by rule 37 (line 375):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token READ ()
Shifting token READ ()
Entering state 18
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 53
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 104
Reducing stack by rule 46 (line 408):
   $1 = token READ ()
   $2 = token OPEN_BRACKET ()
   $3 = token IDENTIFIER ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm read_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 33
Reducing stack by rule 16 (line 295):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56
Entering state 30
Reading a token: Next token is token ADD_OPERATOR ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56
Entering state 29
Next token is token ADD_OPERATOR ()
Shifting token ADD_OPERATOR ()
Entering state 58
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 29 58
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 29 58
Entering state 86
Reading a token: Next token is token ASSIGNMENT_OPERATOR ()
Reducing stack by rule 27 (line 338):
   $1 = nterm expression ()
   $2 = token ADD_OPERATOR ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56
Entering state 29
Next token is token ASSIGNMENT_OPERATOR ()
Shifting token ASSIGNMENT_OPERATOR ()
Entering state 57
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 85
Reducing stack by rule 22 (line 315):
   $1 = nterm expression ()
   $2 = token ASSIGNMENT_OPERATOR ()
   $3 = token IDENTIFIER ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 27
Reducing stack by rule 14 (line 289):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 52
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 17 52
Entering state 80
Reducing stack by rule 38 (line 380):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 40 63 56 17 52
Entering state 81
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 102
Reducing stack by rule 36 (line 372):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 16
Reducing stack by rule 37 (line 375):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token ENDP ()
Reducing stack by rule 2 (line 228):
   $1 = token DECLARATIONS ()
   $2 = nterm declaration_block ()
   $3 = token CODE ()
   $4 = nterm statement_list ()
-> $$ = nterm block ()
Stack now 0 1 3
Entering state 7
Next token is token ENDP ()
Shifting token ENDP ()
Entering state 39
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 62
Reading a token: Next token is token PERIOD ()
Shifting token PERIOD ()
Entering state 90
Reducing stack by rule 1 (line 196):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm block ()
   $4 = token ENDP ()
   $5 = token IDENTIFIER ()
   $6 = token PERIOD ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
#include <stdio.h>

void _spl_flush_stdin()
{
	char c = -1;
	do
	{
		c = getchar();
	} while (c != '\n' && c != ' ' && c != EOF);
}

void spl_Prog4D()
{
	double spl_r1, spl_r2, spl_r3;

	spl_r1 = -2.400000;
	spl_r2 = -34.989000;
	spl_r3 = ((spl_r1 * spl_r2) / 7.400000);
	printf("%lf", spl_r3);
	printf("\n");
	scanf("%lf", &spl_r1);
	_spl_flush_stdin();
	spl_r3 = (spl_r1 + spl_r3);
	printf("%lf", spl_r3);
	printf("\n");
}

int main()
{
	spl_Prog4D();
	return 0;
}
--31/10/2019----------------------------------------------------- 
Parse debug output for e.spl 
-- 0:49:50.51----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reading a token: Next token is token COLON ()
Shifting token COLON ()
Entering state 3
Reading a token: Next token is token DECLARATIONS ()
Shifting token DECLARATIONS ()
Entering state 5
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 8
Reducing stack by rule 7 (line 258):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier_list ()
Stack now 0 1 3 5
Entering state 11
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 43
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 65
Reducing stack by rule 8 (line 261):
   $1 = nterm identifier_list ()
   $2 = token COMMA ()
   $3 = token IDENTIFIER ()
-> $$ = nterm identifier_list ()
Stack now 0 1 3 5
Entering state 11
Reading a token: Next token is token OF ()
Shifting token OF ()
Entering state 42
Reading a token: Next token is token TYPE ()
Shifting token TYPE ()
Entering state 64
Reading a token: Next token is token TYPE_INTEGER ()
Shifting token TYPE_INTEGER ()
Entering state 92
Reducing stack by rule 10 (line 270):
   $1 = token TYPE_INTEGER ()
-> $$ = nterm type ()
Stack now 0 1 3 5 11 42 64
Entering state 94
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 105
Reducing stack by rule 6 (line 244):
   $1 = nterm identifier_list ()
   $2 = token OF ()
   $3 = token TYPE ()
   $4 = nterm type ()
   $5 = token SEMI_COLON ()
-> $$ = nterm declaration ()
Stack now 0 1 3 5
Entering state 10
Reducing stack by rule 4 (line 236):
   $1 = nterm declaration ()
-> $$ = nterm declaration_block ()
Stack now 0 1 3 5
Entering state 9
Reading a token: Next token is token CODE ()
Shifting token CODE ()
Entering state 40
Reading a token: Next token is token READ ()
Shifting token READ ()
Entering state 18
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 53
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 82
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 104
Reducing stack by rule 46 (line 408):
   $1 = token READ ()
   $2 = token OPEN_BRACKET ()
   $3 = token IDENTIFIER ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm read_statement ()
Stack now 0 1 3 5 9 40
Entering state 33
Reducing stack by rule 16 (line 295):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40
Entering state 26
Reducing stack by rule 12 (line 280):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 12
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 12
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 12
Entering state 30
Reading a token: Next token is token LESS_EQUAL_TO_OPERATOR ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 12
Entering state 45
Next token is token LESS_EQUAL_TO_OPERATOR ()
Shifting token LESS_EQUAL_TO_OPERATOR ()
Entering state 71
Reducing stack by rule 44 (line 400):
   $1 = token LESS_EQUAL_TO_OPERATOR ()
-> $$ = nterm comparator ()
Stack now 0 1 3 5 9 40 63 56 12 45
Entering state 73
Reading a token: Next token is token UNSIGNED_INTEGER ()
Shifting token UNSIGNED_INTEGER ()
Entering state 22
Reducing stack by rule 33 (line 360):
   $1 = token UNSIGNED_INTEGER ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 63 56 12 45 73
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 12 45 73
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 12 45 73
Entering state 30
Reading a token: Next token is token OR ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 12 45 73
Entering state 95
Next token is token OR ()
Reducing stack by rule 54 (line 442):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm comparison ()
Stack now 0 1 3 5 9 40 63 56 12
Entering state 48
Reducing stack by rule 52 (line 434):
   $1 = nterm comparison ()
-> $$ = nterm logical ()
Stack now 0 1 3 5 9 40 63 56 12
Entering state 47
Reducing stack by rule 49 (line 425):
   $1 = nterm logical ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 40 63 56 12
Entering state 46
Next token is token OR ()
Shifting token OR ()
Entering state 76
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 12 46 76
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 12 46 76
Entering state 30
Reading a token: Next token is token MORE_EQUAL_TO_OPERATOR ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 12 46 76
Entering state 45
Next token is token MORE_EQUAL_TO_OPERATOR ()
Shifting token MORE_EQUAL_TO_OPERATOR ()
Entering state 72
Reducing stack by rule 45 (line 403):
   $1 = token MORE_EQUAL_TO_OPERATOR ()
-> $$ = nterm comparator ()
Stack now 0 1 3 5 9 40 63 56 12 46 76 45
Entering state 73
Reading a token: Next token is token UNSIGNED_INTEGER ()
Shifting token UNSIGNED_INTEGER ()
Entering state 22
Reducing stack by rule 33 (line 360):
   $1 = token UNSIGNED_INTEGER ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 63 56 12 46 76 45 73
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 12 46 76 45 73
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 12 46 76 45 73
Entering state 30
Reading a token: Next token is token THEN ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 12 46 76 45 73
Entering state 95
Next token is token THEN ()
Reducing stack by rule 54 (line 442):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm comparison ()
Stack now 0 1 3 5 9 40 63 56 12 46 76
Entering state 48
Reducing stack by rule 52 (line 434):
   $1 = nterm comparison ()
-> $$ = nterm logical ()
Stack now 0 1 3 5 9 40 63 56 12 46 76
Entering state 98
Reducing stack by rule 51 (line 429):
   $1 = nterm conditional ()
   $2 = token OR ()
   $3 = nterm logical ()
-> $$ = nterm conditional ()
Stack now 0 1 3 5 9 40 63 56 12
Entering state 46
Next token is token THEN ()
Shifting token THEN ()
Entering state 74
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 52
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 12 46 74 17 52
Entering state 80
Reducing stack by rule 38 (line 380):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 40 63 56 12 46 74 17 52
Entering state 81
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 102
Reducing stack by rule 36 (line 372):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 63 56 12 46 74
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56 12 46 74
Entering state 26
Reducing stack by rule 12 (line 280):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40 63 56 12 46 74
Entering state 96
Reading a token: Next token is token ENDIF ()
Shifting token ENDIF ()
Entering state 107
Reducing stack by rule 47 (line 415):
   $1 = token IF ()
   $2 = nterm conditional ()
   $3 = token THEN ()
   $4 = nterm statement_list ()
   $5 = token ENDIF ()
-> $$ = nterm if_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 34
Reducing stack by rule 17 (line 298):
   $1 = nterm if_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 52
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 19
Reading a token: Next token is token UNSIGNED_INTEGER ()
Shifting token UNSIGNED_INTEGER ()
Entering state 22
Reducing stack by rule 33 (line 360):
   $1 = token UNSIGNED_INTEGER ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 63 56 17 52 19
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 17 52 19
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 17 52 19
Entering state 30
Reading a token: Next token is token SUBTRACT_OPERATOR ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 17 52 19
Entering state 54
Next token is token SUBTRACT_OPERATOR ()
Shifting token SUBTRACT_OPERATOR ()
Entering state 59
Reading a token: Next token is token UNSIGNED_INTEGER ()
Shifting token UNSIGNED_INTEGER ()
Entering state 22
Reducing stack by rule 33 (line 360):
   $1 = token UNSIGNED_INTEGER ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 63 56 17 52 19 54 59
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 17 52 19 54 59
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 17 52 19 54 59
Entering state 87
Reading a token: Next token is token CLOSE_BRACKET ()
Reducing stack by rule 26 (line 335):
   $1 = nterm expression ()
   $2 = token SUBTRACT_OPERATOR ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 17 52 19
Entering state 54
Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 83
Reducing stack by rule 23 (line 322):
   $1 = token OPEN_BRACKET ()
   $2 = nterm expression ()
   $3 = token CLOSE_BRACKET ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 17 52
Entering state 80
Reducing stack by rule 38 (line 380):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 40 63 56 17 52
Entering state 81
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 102
Reducing stack by rule 36 (line 372):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 16
Reducing stack by rule 37 (line 375):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token FOR ()
Shifting token FOR ()
Entering state 15
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 51
Reading a token: Next token is token IS ()
Shifting token IS ()
Entering state 79
Reading a token: Next token is token SUBTRACT_OPERATOR ()
Shifting token SUBTRACT_OPERATOR ()
Entering state 20
Reading a token: Next token is token UNSIGNED_INTEGER ()
Shifting token UNSIGNED_INTEGER ()
Entering state 55
Reducing stack by rule 34 (line 363):
   $1 = token SUBTRACT_OPERATOR ()
   $2 = token UNSIGNED_INTEGER ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 63 56 15 51 79
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 15 51 79
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 15 51 79
Entering state 30
Reading a token: Next token is token BY ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 15 51 79
Entering state 101
Next token is token BY ()
Shifting token BY ()
Entering state 110
Reading a token: Next token is token SUBTRACT_OPERATOR ()
Shifting token SUBTRACT_OPERATOR ()
Entering state 20
Reading a token: Next token is token UNSIGNED_INTEGER ()
Shifting token UNSIGNED_INTEGER ()
Entering state 55
Reducing stack by rule 34 (line 363):
   $1 = token SUBTRACT_OPERATOR ()
   $2 = token UNSIGNED_INTEGER ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110
Entering state 30
Reading a token: Next token is token TO ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110
Entering state 113
Next token is token TO ()
Shifting token TO ()
Entering state 115
Reading a token: Next token is token SUBTRACT_OPERATOR ()
Shifting token SUBTRACT_OPERATOR ()
Entering state 20
Reading a token: Next token is token UNSIGNED_INTEGER ()
Shifting token UNSIGNED_INTEGER ()
Entering state 55
Reducing stack by rule 34 (line 363):
   $1 = token SUBTRACT_OPERATOR ()
   $2 = token UNSIGNED_INTEGER ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115
Entering state 30
Reading a token: Next token is token DO ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115
Entering state 116
Next token is token DO ()
Shifting token DO ()
Entering state 117
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 52
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 116 117 17 52
Entering state 80
Reducing stack by rule 38 (line 380):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 116 117 17 52
Entering state 81
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 102
Reducing stack by rule 36 (line 372):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 116 117
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 116 117
Entering state 26
Reducing stack by rule 12 (line 280):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 116 117
Entering state 118
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 16
Reducing stack by rule 37 (line 375):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 116 117 118 56
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 116 117 118 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 116 117
Entering state 118
Reading a token: Next token is token ENDFOR ()
Shifting token ENDFOR ()
Entering state 119
Reducing stack by rule 55 (line 447):
   $1 = token FOR ()
   $2 = token IDENTIFIER ()
   $3 = token IS ()
   $4 = nterm expression ()
   $5 = token BY ()
   $6 = nterm expression ()
   $7 = token TO ()
   $8 = nterm expression ()
   $9 = token DO ()
   $10 = nterm statement_list ()
   $11 = token ENDFOR ()
-> $$ = nterm for_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 36
Reducing stack by rule 19 (line 304):
   $1 = nterm for_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token SUBTRACT_OPERATOR ()
Shifting token SUBTRACT_OPERATOR ()
Entering state 20
Reading a token: Next token is token UNSIGNED_INTEGER ()
Shifting token UNSIGNED_INTEGER ()
Entering state 55
Reducing stack by rule 34 (line 363):
   $1 = token SUBTRACT_OPERATOR ()
   $2 = token UNSIGNED_INTEGER ()
-> $$ = nterm constant ()
Stack now 0 1 3 5 9 40 63 56
Entering state 31
Reducing stack by rule 25 (line 330):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56
Entering state 30
Reading a token: Next token is token ASSIGNMENT_OPERATOR ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56
Entering state 29
Next token is token ASSIGNMENT_OPERATOR ()
Shifting token ASSIGNMENT_OPERATOR ()
Entering state 57
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 85
Reducing stack by rule 22 (line 315):
   $1 = nterm expression ()
   $2 = token ASSIGNMENT_OPERATOR ()
   $3 = token IDENTIFIER ()
-> $$ = nterm assignment_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 27
Reducing stack by rule 14 (line 289):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token FOR ()
Shifting token FOR ()
Entering state 15
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 51
Reading a token: Next token is token IS ()
Shifting token IS ()
Entering state 79
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 15 51 79
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 15 51 79
Entering state 30
Reading a token: Next token is token MULTIPULCATION_OPERATOR ()
Shifting token MULTIPULCATION_OPERATOR ()
Entering state 61
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 30 61
Entering state 89
Reducing stack by rule 29 (line 346):
   $1 = nterm term ()
   $2 = token MULTIPULCATION_OPERATOR ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 15 51 79
Entering state 30
Reading a token: Next token is token MULTIPULCATION_OPERATOR ()
Shifting token MULTIPULCATION_OPERATOR ()
Entering state 61
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 30 61
Entering state 89
Reducing stack by rule 29 (line 346):
   $1 = nterm term ()
   $2 = token MULTIPULCATION_OPERATOR ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 15 51 79
Entering state 30
Reading a token: Next token is token BY ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 15 51 79
Entering state 101
Next token is token BY ()
Shifting token BY ()
Entering state 110
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110
Entering state 30
Reading a token: Next token is token MULTIPULCATION_OPERATOR ()
Shifting token MULTIPULCATION_OPERATOR ()
Entering state 61
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 30 61
Entering state 89
Reducing stack by rule 29 (line 346):
   $1 = nterm term ()
   $2 = token MULTIPULCATION_OPERATOR ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110
Entering state 30
Reading a token: Next token is token MULTIPULCATION_OPERATOR ()
Shifting token MULTIPULCATION_OPERATOR ()
Entering state 61
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 30 61
Entering state 89
Reducing stack by rule 29 (line 346):
   $1 = nterm term ()
   $2 = token MULTIPULCATION_OPERATOR ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110
Entering state 30
Reading a token: Next token is token MULTIPULCATION_OPERATOR ()
Shifting token MULTIPULCATION_OPERATOR ()
Entering state 61
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 30 61
Entering state 89
Reducing stack by rule 29 (line 346):
   $1 = nterm term ()
   $2 = token MULTIPULCATION_OPERATOR ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110
Entering state 30
Reading a token: Next token is token MULTIPULCATION_OPERATOR ()
Shifting token MULTIPULCATION_OPERATOR ()
Entering state 61
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 30 61
Entering state 89
Reducing stack by rule 29 (line 346):
   $1 = nterm term ()
   $2 = token MULTIPULCATION_OPERATOR ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110
Entering state 30
Reading a token: Next token is token TO ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110
Entering state 113
Next token is token TO ()
Shifting token TO ()
Entering state 115
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115
Entering state 30
Reading a token: Next token is token MULTIPULCATION_OPERATOR ()
Shifting token MULTIPULCATION_OPERATOR ()
Entering state 61
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 30 61
Entering state 89
Reducing stack by rule 29 (line 346):
   $1 = nterm term ()
   $2 = token MULTIPULCATION_OPERATOR ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115
Entering state 30
Reading a token: Next token is token MULTIPULCATION_OPERATOR ()
Shifting token MULTIPULCATION_OPERATOR ()
Entering state 61
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 19
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 30 61 19
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 30 61 19
Entering state 30
Reading a token: Next token is token ADD_OPERATOR ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 30 61 19
Entering state 54
Next token is token ADD_OPERATOR ()
Shifting token ADD_OPERATOR ()
Entering state 58
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 30 61 19 54 58
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 30 61 19 54 58
Entering state 86
Reading a token: Next token is token ADD_OPERATOR ()
Reducing stack by rule 27 (line 338):
   $1 = nterm expression ()
   $2 = token ADD_OPERATOR ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 30 61 19
Entering state 54
Next token is token ADD_OPERATOR ()
Shifting token ADD_OPERATOR ()
Entering state 58
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 30 61 19 54 58
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 30 61 19 54 58
Entering state 86
Reading a token: Next token is token ADD_OPERATOR ()
Reducing stack by rule 27 (line 338):
   $1 = nterm expression ()
   $2 = token ADD_OPERATOR ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 30 61 19
Entering state 54
Next token is token ADD_OPERATOR ()
Shifting token ADD_OPERATOR ()
Entering state 58
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 30 61 19 54 58
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 30 61 19 54 58
Entering state 86
Reading a token: Next token is token ADD_OPERATOR ()
Reducing stack by rule 27 (line 338):
   $1 = nterm expression ()
   $2 = token ADD_OPERATOR ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 30 61 19
Entering state 54
Next token is token ADD_OPERATOR ()
Shifting token ADD_OPERATOR ()
Entering state 58
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 30 61 19 54 58
Entering state 28
Reducing stack by rule 31 (line 352):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 30 61 19 54 58
Entering state 86
Reading a token: Next token is token CLOSE_BRACKET ()
Reducing stack by rule 27 (line 338):
   $1 = nterm expression ()
   $2 = token ADD_OPERATOR ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 30 61 19
Entering state 54
Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 83
Reducing stack by rule 23 (line 322):
   $1 = token OPEN_BRACKET ()
   $2 = nterm expression ()
   $3 = token CLOSE_BRACKET ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 30 61
Entering state 89
Reducing stack by rule 29 (line 346):
   $1 = nterm term ()
   $2 = token MULTIPULCATION_OPERATOR ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115
Entering state 30
Reading a token: Next token is token DO ()
Reducing stack by rule 28 (line 341):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115
Entering state 116
Next token is token DO ()
Shifting token DO ()
Entering state 117
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token OPEN_BRACKET ()
Shifting token OPEN_BRACKET ()
Entering state 52
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 24 (line 325):
   $1 = token IDENTIFIER ()
-> $$ = nterm value ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 116 117 17 52
Entering state 80
Reducing stack by rule 38 (line 380):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 116 117 17 52
Entering state 81
Reading a token: Next token is token CLOSE_BRACKET ()
Shifting token CLOSE_BRACKET ()
Entering state 102
Reducing stack by rule 36 (line 372):
   $1 = token WRITE ()
   $2 = token OPEN_BRACKET ()
   $3 = nterm output_list ()
   $4 = token CLOSE_BRACKET ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 116 117
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 116 117
Entering state 26
Reducing stack by rule 12 (line 280):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 116 117
Entering state 118
Reading a token: Next token is token SEMI_COLON ()
Shifting token SEMI_COLON ()
Entering state 56
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 16
Reducing stack by rule 37 (line 375):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 116 117 118 56
Entering state 32
Reducing stack by rule 15 (line 292):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 116 117 118 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40 63 56 15 51 79 101 110 113 115 116 117
Entering state 118
Reading a token: Next token is token ENDFOR ()
Shifting token ENDFOR ()
Entering state 119
Reducing stack by rule 55 (line 447):
   $1 = token FOR ()
   $2 = token IDENTIFIER ()
   $3 = token IS ()
   $4 = nterm expression ()
   $5 = token BY ()
   $6 = nterm expression ()
   $7 = token TO ()
   $8 = nterm expression ()
   $9 = token DO ()
   $10 = nterm statement_list ()
   $11 = token ENDFOR ()
-> $$ = nterm for_statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 36
Reducing stack by rule 19 (line 304):
   $1 = nterm for_statement ()
-> $$ = nterm statement ()
Stack now 0 1 3 5 9 40 63 56
Entering state 84
Reducing stack by rule 13 (line 283):
   $1 = nterm statement_list ()
   $2 = token SEMI_COLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 1 3 5 9 40
Entering state 63
Reading a token: Next token is token ENDP ()
Reducing stack by rule 2 (line 228):
   $1 = token DECLARATIONS ()
   $2 = nterm declaration_block ()
   $3 = token CODE ()
   $4 = nterm statement_list ()
-> $$ = nterm block ()
Stack now 0 1 3
Entering state 7
Next token is token ENDP ()
Shifting token ENDP ()
Entering state 39
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 62
Reading a token: Next token is token PERIOD ()
Shifting token PERIOD ()
Entering state 90
Reducing stack by rule 1 (line 196):
   $1 = token IDENTIFIER ()
   $2 = token COLON ()
   $3 = nterm block ()
   $4 = token ENDP ()
   $5 = token IDENTIFIER ()
   $6 = token PERIOD ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
#include <stdio.h>

void _spl_flush_stdin()
{
	char c = -1;
	do
	{
		c = getchar();
	} while (c != '\n' && c != ' ' && c != EOF);
}

void spl_ProgV()
{
	int spl_integer, spl_i;

	scanf("%d", &spl_integer);
	_spl_flush_stdin();
	if (((spl_integer <= 5) || (spl_integer >= 12)))
	{
		printf("%d", spl_integer);
	}
	printf("%d", (int)(36 - 1));
	printf("\n");
	int _spl_integer_by = -1;
	for (spl_integer = -1; _spl_integer_by < 0 ? spl_integer >= -5 : spl_integer <= -5; spl_integer += _spl_integer_by)
	{
		printf("%d", spl_integer);
		printf("\n");
		_spl_integer_by = -1;
	}
	spl_i = -1;
	_spl_integer_by = ((((spl_i * spl_i) * spl_i) * spl_i) * spl_i);
	for (spl_integer = ((spl_i * spl_i) * spl_i); _spl_integer_by < 0 ? spl_integer >= ((spl_i * spl_i) * ((((spl_i + spl_i) + spl_i) + spl_i) + spl_i)) : spl_integer <= ((spl_i * spl_i) * ((((spl_i + spl_i) + spl_i) + spl_i) + spl_i)); spl_integer += _spl_integer_by)
	{
		printf("%d", spl_integer);
		printf("\n");
		_spl_integer_by = ((((spl_i * spl_i) * spl_i) * spl_i) * spl_i);
	}
}

int main()
{
	spl_ProgV();
	return 0;
}
/*WARNING (29:1): spl_integer is declared and is assigned to but never used!*/
--31/10/2019----------------------------------------------------- 
Parse Tree output for a.spl 
-- 0:49:51.54----------------------------------------------------- 
Level 0   	id_program (1)
Level 1   	...|id_block (2)
Level 2   	...|...|id_statement_list (6)
Level 3   	...|...|...|id_statement_list (6)
Level 4   	...|...|...|...|id_statement (7)
Level 5   	...|...|...|...|...|id_write_statement (12)
Level 6   	...|...|...|...|...|...|id_output_list (13)
Level 7   	...|...|...|...|...|...|...|id_output_list (13)
Level 8   	...|...|...|...|...|...|...|...|id_output_list (13)
Level 9   	...|...|...|...|...|...|...|...|...|id_output_list (13)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_output_list (13)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = CHARACTER - Value = h
Level 10   	...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = CHARACTER - Value = e
Level 9   	...|...|...|...|...|...|...|...|...|id_value (9)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = CHARACTER - Value = l
Level 8   	...|...|...|...|...|...|...|...|id_value (9)
Level 9   	...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = CHARACTER - Value = l
Level 7   	...|...|...|...|...|...|...|id_value (9)
Level 8   	...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = CHARACTER - Value = o
Level 3   	...|...|...|id_statement (7)
Level 4   	...|...|...|...|id_write_statement (12)
--31/10/2019----------------------------------------------------- 
Parse Tree output for b.spl 
-- 0:49:51.80----------------------------------------------------- 
Level 0   	id_program (1)
Level 1   	...|id_block (2)
Level 2   	...|...|id_declaration_block (3)
Level 3   	...|...|...|id_declaration_block (3)
Level 4   	...|...|...|...|id_declaration_block (3)
Level 5   	...|...|...|...|...|id_declaration (4)
Level 6   	...|...|...|...|...|...|id_identifier_list (5) - Symbol (Variable) Info: Identifier = spl_b - Type = INTEGER - Assigned To = 1 - Used = 1
Level 7   	...|...|...|...|...|...|...|id_identifier_list (5) - Symbol (Variable) Info: Identifier = spl_a - Type = INTEGER - Assigned To = 1 - Used = 1
Level 6   	...|...|...|...|...|...|id_type (16)
Level 4   	...|...|...|...|id_declaration (4)
Level 5   	...|...|...|...|...|id_identifier_list (5) - Symbol (Variable) Info: Identifier = spl_c - Type = CHARACTER - Assigned To = 1 - Used = 1
Level 5   	...|...|...|...|...|id_type (16)
Level 3   	...|...|...|id_declaration (4)
Level 4   	...|...|...|...|id_identifier_list (5) - Symbol (Variable) Info: Identifier = spl_e - Type = REAL - Assigned To = 1 - Used = 1
Level 5   	...|...|...|...|...|id_identifier_list (5) - Symbol (Variable) Info: Identifier = spl_d - Type = REAL - Assigned To = 1 - Used = 1
Level 4   	...|...|...|...|id_type (16)
Level 2   	...|...|id_statement_list (6)
Level 3   	...|...|...|id_statement_list (6)
Level 4   	...|...|...|...|id_statement_list (6)
Level 5   	...|...|...|...|...|id_statement_list (6)
Level 6   	...|...|...|...|...|...|id_statement_list (6)
Level 7   	...|...|...|...|...|...|...|id_statement_list (6)
Level 8   	...|...|...|...|...|...|...|...|id_statement_list (6)
Level 9   	...|...|...|...|...|...|...|...|...|id_statement_list (6)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_statement_list (6)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_statement_list (6)
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_statement_list (6)
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_statement (7)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_read_statement (20) - Symbol (Variable) Info: Identifier = spl_a - Type = INTEGER - Assigned To = 1 - Used = 1
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_statement (7)
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_read_statement (20) - Symbol (Variable) Info: Identifier = spl_b - Type = INTEGER - Assigned To = 1 - Used = 1
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_statement (7)
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_if_else_statement (22)
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_conditional (23)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|Unknown value (24)
Level 15   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_comparison (28)
Level 16   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 17   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 18   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_a - Type = INTEGER - Assigned To = 1 - Used = 1
Level 16   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_comparator (19) - Symbol (Operator) Info: Type = operator_type_more_than
Level 16   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 17   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 18   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_b - Type = INTEGER - Assigned To = 1 - Used = 1
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_statement_list (6)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_statement (7)
Level 15   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_write_statement (12)
Level 16   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_output_list (13)
Level 17   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 18   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = CHARACTER - Value = A
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_statement_list (6)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_statement (7)
Level 15   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_write_statement (12)
Level 16   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_output_list (13)
Level 17   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 18   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = CHARACTER - Value = B
Level 10   	...|...|...|...|...|...|...|...|...|...|id_statement (7)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_write_statement (12)
Level 9   	...|...|...|...|...|...|...|...|...|id_statement (7)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_read_statement (20) - Symbol (Variable) Info: Identifier = spl_d - Type = REAL - Assigned To = 1 - Used = 1
Level 8   	...|...|...|...|...|...|...|...|id_statement (7)
Level 9   	...|...|...|...|...|...|...|...|...|id_assignment_statement (8) - Symbol (Variable) Info: Identifier = spl_e - Type = REAL - Assigned To = 1 - Used = 1
Level 10   	...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_term (11) - Symbol (Operator) Info: Type = operator_type_multipulcation
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_d - Type = REAL - Assigned To = 1 - Used = 1
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = REAL - Value = 2.300000
Level 7   	...|...|...|...|...|...|...|id_statement (7)
Level 8   	...|...|...|...|...|...|...|...|id_write_statement (12)
Level 9   	...|...|...|...|...|...|...|...|...|id_output_list (13)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_e - Type = REAL - Assigned To = 1 - Used = 1
Level 6   	...|...|...|...|...|...|id_statement (7)
Level 7   	...|...|...|...|...|...|...|id_write_statement (12)
Level 5   	...|...|...|...|...|id_statement (7)
Level 6   	...|...|...|...|...|...|id_read_statement (20) - Symbol (Variable) Info: Identifier = spl_c - Type = CHARACTER - Assigned To = 1 - Used = 1
Level 4   	...|...|...|...|id_statement (7)
Level 5   	...|...|...|...|...|id_write_statement (12)
Level 6   	...|...|...|...|...|...|id_output_list (13)
Level 7   	...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_c - Type = CHARACTER - Assigned To = 1 - Used = 1
Level 3   	...|...|...|id_statement (7)
Level 4   	...|...|...|...|id_write_statement (12)
--31/10/2019----------------------------------------------------- 
Parse Tree output for c.spl 
-- 0:49:52.03----------------------------------------------------- 
/*WARNING (9:17): spl_a is used before it has been assigned to, this will have unexpected consequences!*/
/*WARNING (10:18): spl_a is used before it has been assigned to, this will have unexpected consequences!*/
Level 0   	id_program (1)
Level 1   	...|id_block (2)
Level 2   	...|...|id_declaration_block (3)
Level 3   	...|...|...|id_declaration (4)
Level 4   	...|...|...|...|id_identifier_list (5) - Symbol (Variable) Info: Identifier = spl_a - Type = INTEGER - Assigned To = 1 - Used = 0
Level 4   	...|...|...|...|id_type (16)
Level 2   	...|...|id_statement_list (6)
Level 3   	...|...|...|id_statement_list (6)
Level 4   	...|...|...|...|id_statement_list (6)
Level 5   	...|...|...|...|...|id_statement_list (6)
Level 6   	...|...|...|...|...|...|id_statement_list (6)
Level 7   	...|...|...|...|...|...|...|id_statement_list (6)
Level 8   	...|...|...|...|...|...|...|...|id_statement (7)
Level 9   	...|...|...|...|...|...|...|...|...|id_for_statement (29) - Symbol (Variable) Info: Identifier = spl_a - Type = INTEGER - Assigned To = 1 - Used = 0
Level 10   	...|...|...|...|...|...|...|...|...|...|id_for_statement_is_by_to (30)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = INTEGER - Value = 1
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = INTEGER - Value = 1
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = INTEGER - Value = 13
Level 10   	...|...|...|...|...|...|...|...|...|...|id_statement_list (6)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_statement (7)
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_if_statement (21)
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_conditional (23)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|Unknown value (24) - Symbol (Operator) Info: Type = operator_type_not
Level 15   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_comparison (28)
Level 16   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 17   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 18   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_a - Type = INTEGER - Assigned To = 1 - Used = 0
Level 16   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_comparator (19) - Symbol (Operator) Info: Type = operator_type_equality
Level 16   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 17   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 18   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 19   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = INTEGER - Value = 7
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_statement_list (6)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_statement_list (6)
Level 15   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_statement (7)
Level 16   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_write_statement (12)
Level 17   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_output_list (13)
Level 18   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_a - Type = INTEGER - Assigned To = 1 - Used = 0
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_statement (7)
Level 15   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_write_statement (12)
Level 7   	...|...|...|...|...|...|...|id_statement (7)
Level 8   	...|...|...|...|...|...|...|...|id_assignment_statement (8) - Symbol (Variable) Info: Identifier = spl_a - Type = INTEGER - Assigned To = 1 - Used = 0
Level 9   	...|...|...|...|...|...|...|...|...|id_expression (10)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = INTEGER - Value = 0
Level 6   	...|...|...|...|...|...|id_statement (7)
Level 7   	...|...|...|...|...|...|...|id_do_statement (32)
Level 8   	...|...|...|...|...|...|...|...|id_statement_list (6)
Level 9   	...|...|...|...|...|...|...|...|...|id_statement_list (6)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_statement (7)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_assignment_statement (8) - Symbol (Variable) Info: Identifier = spl_a - Type = INTEGER - Assigned To = 1 - Used = 0
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_expression (10) - Symbol (Operator) Info: Type = operator_type_add
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 15   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_a - Type = INTEGER - Assigned To = 1 - Used = 0
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 15   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = INTEGER - Value = 1
Level 9   	...|...|...|...|...|...|...|...|...|id_statement (7)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_if_statement (21)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_conditional (23) - Symbol (Operator) Info: Type = operator_type_and
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_conditional (23)
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|Unknown value (24) - Symbol (Operator) Info: Type = operator_type_not
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_comparison (28)
Level 15   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 16   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 17   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_a - Type = INTEGER - Assigned To = 1 - Used = 0
Level 15   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_comparator (19) - Symbol (Operator) Info: Type = operator_type_equality
Level 15   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 16   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 17   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 18   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = INTEGER - Value = 6
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|Unknown value (24)
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_comparison (28)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 15   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 16   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_a - Type = INTEGER - Assigned To = 1 - Used = 0
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_comparator (19) - Symbol (Operator) Info: Type = operator_type_not_equal
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 15   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 16   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 17   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = INTEGER - Value = 8
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_statement_list (6)
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_statement_list (6)
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_statement (7)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_write_statement (12)
Level 15   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_output_list (13)
Level 16   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_a - Type = INTEGER - Assigned To = 1 - Used = 0
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_statement (7)
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_write_statement (12)
Level 8   	...|...|...|...|...|...|...|...|id_conditional (23)
Level 9   	...|...|...|...|...|...|...|...|...|Unknown value (24)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_comparison (28)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_a - Type = INTEGER - Assigned To = 1 - Used = 0
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_comparator (19) - Symbol (Operator) Info: Type = operator_type_less_than
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = INTEGER - Value = 14
Level 5   	...|...|...|...|...|id_statement (7)
Level 6   	...|...|...|...|...|...|id_assignment_statement (8) - Symbol (Variable) Info: Identifier = spl_a - Type = INTEGER - Assigned To = 1 - Used = 0
Level 7   	...|...|...|...|...|...|...|id_expression (10)
Level 8   	...|...|...|...|...|...|...|...|id_term (11)
Level 9   	...|...|...|...|...|...|...|...|...|id_value (9)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = INTEGER - Value = 0
Level 4   	...|...|...|...|id_statement (7)
Level 5   	...|...|...|...|...|id_while_statement (31)
Level 6   	...|...|...|...|...|...|id_conditional (23)
Level 7   	...|...|...|...|...|...|...|Unknown value (24)
Level 8   	...|...|...|...|...|...|...|...|id_comparison (28)
Level 9   	...|...|...|...|...|...|...|...|...|id_expression (10)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_a - Type = INTEGER - Assigned To = 1 - Used = 0
Level 9   	...|...|...|...|...|...|...|...|...|id_comparator (19) - Symbol (Operator) Info: Type = operator_type_less_than
Level 9   	...|...|...|...|...|...|...|...|...|id_expression (10)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = INTEGER - Value = 12
Level 6   	...|...|...|...|...|...|id_statement_list (6)
Level 7   	...|...|...|...|...|...|...|id_statement_list (6)
Level 8   	...|...|...|...|...|...|...|...|id_statement (7)
Level 9   	...|...|...|...|...|...|...|...|...|id_write_statement (12)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_output_list (13)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_a - Type = INTEGER - Assigned To = 1 - Used = 0
Level 7   	...|...|...|...|...|...|...|id_statement (7)
Level 8   	...|...|...|...|...|...|...|...|id_assignment_statement (8) - Symbol (Variable) Info: Identifier = spl_a - Type = INTEGER - Assigned To = 1 - Used = 0
Level 9   	...|...|...|...|...|...|...|...|...|id_expression (10) - Symbol (Operator) Info: Type = operator_type_add
Level 10   	...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_a - Type = INTEGER - Assigned To = 1 - Used = 0
Level 10   	...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = INTEGER - Value = 1
Level 3   	...|...|...|id_statement (7)
Level 4   	...|...|...|...|id_write_statement (12)
/*WARNING (28:16): spl_a is declared and is assigned to but never used!*/
--31/10/2019----------------------------------------------------- 
Parse Tree output for d.spl 
-- 0:49:52.30----------------------------------------------------- 
Level 0   	id_program (1)
Level 1   	...|id_block (2)
Level 2   	...|...|id_declaration_block (3)
Level 3   	...|...|...|id_declaration (4)
Level 4   	...|...|...|...|id_identifier_list (5) - Symbol (Variable) Info: Identifier = spl_r3 - Type = REAL - Assigned To = 1 - Used = 1
Level 5   	...|...|...|...|...|id_identifier_list (5) - Symbol (Variable) Info: Identifier = spl_r2 - Type = REAL - Assigned To = 1 - Used = 1
Level 6   	...|...|...|...|...|...|id_identifier_list (5) - Symbol (Variable) Info: Identifier = spl_r1 - Type = REAL - Assigned To = 1 - Used = 1
Level 4   	...|...|...|...|id_type (16)
Level 2   	...|...|id_statement_list (6)
Level 3   	...|...|...|id_statement_list (6)
Level 4   	...|...|...|...|id_statement_list (6)
Level 5   	...|...|...|...|...|id_statement_list (6)
Level 6   	...|...|...|...|...|...|id_statement_list (6)
Level 7   	...|...|...|...|...|...|...|id_statement_list (6)
Level 8   	...|...|...|...|...|...|...|...|id_statement_list (6)
Level 9   	...|...|...|...|...|...|...|...|...|id_statement_list (6)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_statement_list (6)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_statement (7)
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_assignment_statement (8) - Symbol (Variable) Info: Identifier = spl_r1 - Type = REAL - Assigned To = 1 - Used = 1
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 15   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 16   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = REAL - Value = -2.400000
Level 10   	...|...|...|...|...|...|...|...|...|...|id_statement (7)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_assignment_statement (8) - Symbol (Variable) Info: Identifier = spl_r2 - Type = REAL - Assigned To = 1 - Used = 1
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 15   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = REAL - Value = -34.989000
Level 9   	...|...|...|...|...|...|...|...|...|id_statement (7)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_assignment_statement (8) - Symbol (Variable) Info: Identifier = spl_r3 - Type = REAL - Assigned To = 1 - Used = 1
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_term (11) - Symbol (Operator) Info: Type = operator_type_division
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_term (11) - Symbol (Operator) Info: Type = operator_type_multipulcation
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 15   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_r1 - Type = REAL - Assigned To = 1 - Used = 1
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_r2 - Type = REAL - Assigned To = 1 - Used = 1
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = REAL - Value = 7.400000
Level 8   	...|...|...|...|...|...|...|...|id_statement (7)
Level 9   	...|...|...|...|...|...|...|...|...|id_write_statement (12)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_output_list (13)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_r3 - Type = REAL - Assigned To = 1 - Used = 1
Level 7   	...|...|...|...|...|...|...|id_statement (7)
Level 8   	...|...|...|...|...|...|...|...|id_write_statement (12)
Level 6   	...|...|...|...|...|...|id_statement (7)
Level 7   	...|...|...|...|...|...|...|id_read_statement (20) - Symbol (Variable) Info: Identifier = spl_r1 - Type = REAL - Assigned To = 1 - Used = 1
Level 5   	...|...|...|...|...|id_statement (7)
Level 6   	...|...|...|...|...|...|id_assignment_statement (8) - Symbol (Variable) Info: Identifier = spl_r3 - Type = REAL - Assigned To = 1 - Used = 1
Level 7   	...|...|...|...|...|...|...|id_expression (10) - Symbol (Operator) Info: Type = operator_type_add
Level 8   	...|...|...|...|...|...|...|...|id_expression (10)
Level 9   	...|...|...|...|...|...|...|...|...|id_term (11)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_r1 - Type = REAL - Assigned To = 1 - Used = 1
Level 8   	...|...|...|...|...|...|...|...|id_term (11)
Level 9   	...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_r3 - Type = REAL - Assigned To = 1 - Used = 1
Level 4   	...|...|...|...|id_statement (7)
Level 5   	...|...|...|...|...|id_write_statement (12)
Level 6   	...|...|...|...|...|...|id_output_list (13)
Level 7   	...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_r3 - Type = REAL - Assigned To = 1 - Used = 1
Level 3   	...|...|...|id_statement (7)
Level 4   	...|...|...|...|id_write_statement (12)
--31/10/2019----------------------------------------------------- 
Parse Tree output for e.spl 
-- 0:49:53.11----------------------------------------------------- 
Level 0   	id_program (1)
Level 1   	...|id_block (2)
Level 2   	...|...|id_declaration_block (3)
Level 3   	...|...|...|id_declaration (4)
Level 4   	...|...|...|...|id_identifier_list (5) - Symbol (Variable) Info: Identifier = spl_i - Type = INTEGER - Assigned To = 1 - Used = 1
Level 5   	...|...|...|...|...|id_identifier_list (5) - Symbol (Variable) Info: Identifier = spl_integer - Type = INTEGER - Assigned To = 1 - Used = 0
Level 4   	...|...|...|...|id_type (16)
Level 2   	...|...|id_statement_list (6)
Level 3   	...|...|...|id_statement_list (6)
Level 4   	...|...|...|...|id_statement_list (6)
Level 5   	...|...|...|...|...|id_statement_list (6)
Level 6   	...|...|...|...|...|...|id_statement_list (6)
Level 7   	...|...|...|...|...|...|...|id_statement_list (6)
Level 8   	...|...|...|...|...|...|...|...|id_statement_list (6)
Level 9   	...|...|...|...|...|...|...|...|...|id_statement (7)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_read_statement (20) - Symbol (Variable) Info: Identifier = spl_integer - Type = INTEGER - Assigned To = 1 - Used = 0
Level 8   	...|...|...|...|...|...|...|...|id_statement (7)
Level 9   	...|...|...|...|...|...|...|...|...|id_if_statement (21)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_conditional (23) - Symbol (Operator) Info: Type = operator_type_or
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_conditional (23)
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|Unknown value (24)
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_comparison (28)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 15   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 16   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_integer - Type = INTEGER - Assigned To = 1 - Used = 0
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_comparator (19) - Symbol (Operator) Info: Type = operator_type_less_equal
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 15   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 16   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 17   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = INTEGER - Value = 5
Level 11   	...|...|...|...|...|...|...|...|...|...|...|Unknown value (24)
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_comparison (28)
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 15   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_integer - Type = INTEGER - Assigned To = 1 - Used = 0
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_comparator (19) - Symbol (Operator) Info: Type = operator_type_more_equal
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 15   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 16   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = INTEGER - Value = 12
Level 10   	...|...|...|...|...|...|...|...|...|...|id_statement_list (6)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_statement (7)
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_write_statement (12)
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_output_list (13)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_integer - Type = INTEGER - Assigned To = 1 - Used = 0
Level 7   	...|...|...|...|...|...|...|id_statement (7)
Level 8   	...|...|...|...|...|...|...|...|id_write_statement (12)
Level 9   	...|...|...|...|...|...|...|...|...|id_output_list (13)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_expression (10) - Symbol (Operator) Info: Type = operator_type_subtract
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 15   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = INTEGER - Value = 36
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = INTEGER - Value = 1
Level 6   	...|...|...|...|...|...|id_statement (7)
Level 7   	...|...|...|...|...|...|...|id_write_statement (12)
Level 5   	...|...|...|...|...|id_statement (7)
Level 6   	...|...|...|...|...|...|id_for_statement (29) - Symbol (Variable) Info: Identifier = spl_integer - Type = INTEGER - Assigned To = 1 - Used = 0
Level 7   	...|...|...|...|...|...|...|id_for_statement_is_by_to (30)
Level 8   	...|...|...|...|...|...|...|...|id_expression (10)
Level 9   	...|...|...|...|...|...|...|...|...|id_term (11)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = INTEGER - Value = -1
Level 8   	...|...|...|...|...|...|...|...|id_expression (10)
Level 9   	...|...|...|...|...|...|...|...|...|id_term (11)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = INTEGER - Value = -1
Level 8   	...|...|...|...|...|...|...|...|id_expression (10)
Level 9   	...|...|...|...|...|...|...|...|...|id_term (11)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_value (9)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = INTEGER - Value = -5
Level 7   	...|...|...|...|...|...|...|id_statement_list (6)
Level 8   	...|...|...|...|...|...|...|...|id_statement_list (6)
Level 9   	...|...|...|...|...|...|...|...|...|id_statement (7)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_write_statement (12)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_output_list (13)
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_integer - Type = INTEGER - Assigned To = 1 - Used = 0
Level 8   	...|...|...|...|...|...|...|...|id_statement (7)
Level 9   	...|...|...|...|...|...|...|...|...|id_write_statement (12)
Level 4   	...|...|...|...|id_statement (7)
Level 5   	...|...|...|...|...|id_assignment_statement (8) - Symbol (Variable) Info: Identifier = spl_i - Type = INTEGER - Assigned To = 1 - Used = 1
Level 6   	...|...|...|...|...|...|id_expression (10)
Level 7   	...|...|...|...|...|...|...|id_term (11)
Level 8   	...|...|...|...|...|...|...|...|id_value (9)
Level 9   	...|...|...|...|...|...|...|...|...|id_constant (14) - Symbol (Constant) Info: Type = INTEGER - Value = -1
Level 3   	...|...|...|id_statement (7)
Level 4   	...|...|...|...|id_for_statement (29) - Symbol (Variable) Info: Identifier = spl_integer - Type = INTEGER - Assigned To = 1 - Used = 0
Level 5   	...|...|...|...|...|id_for_statement_is_by_to (30)
Level 6   	...|...|...|...|...|...|id_expression (10)
Level 7   	...|...|...|...|...|...|...|id_term (11) - Symbol (Operator) Info: Type = operator_type_multipulcation
Level 8   	...|...|...|...|...|...|...|...|id_term (11) - Symbol (Operator) Info: Type = operator_type_multipulcation
Level 9   	...|...|...|...|...|...|...|...|...|id_term (11)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_i - Type = INTEGER - Assigned To = 1 - Used = 1
Level 9   	...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_i - Type = INTEGER - Assigned To = 1 - Used = 1
Level 8   	...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_i - Type = INTEGER - Assigned To = 1 - Used = 1
Level 6   	...|...|...|...|...|...|id_expression (10)
Level 7   	...|...|...|...|...|...|...|id_term (11) - Symbol (Operator) Info: Type = operator_type_multipulcation
Level 8   	...|...|...|...|...|...|...|...|id_term (11) - Symbol (Operator) Info: Type = operator_type_multipulcation
Level 9   	...|...|...|...|...|...|...|...|...|id_term (11) - Symbol (Operator) Info: Type = operator_type_multipulcation
Level 10   	...|...|...|...|...|...|...|...|...|...|id_term (11) - Symbol (Operator) Info: Type = operator_type_multipulcation
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_i - Type = INTEGER - Assigned To = 1 - Used = 1
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_i - Type = INTEGER - Assigned To = 1 - Used = 1
Level 10   	...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_i - Type = INTEGER - Assigned To = 1 - Used = 1
Level 9   	...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_i - Type = INTEGER - Assigned To = 1 - Used = 1
Level 8   	...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_i - Type = INTEGER - Assigned To = 1 - Used = 1
Level 6   	...|...|...|...|...|...|id_expression (10)
Level 7   	...|...|...|...|...|...|...|id_term (11) - Symbol (Operator) Info: Type = operator_type_multipulcation
Level 8   	...|...|...|...|...|...|...|...|id_term (11) - Symbol (Operator) Info: Type = operator_type_multipulcation
Level 9   	...|...|...|...|...|...|...|...|...|id_term (11)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_i - Type = INTEGER - Assigned To = 1 - Used = 1
Level 9   	...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_i - Type = INTEGER - Assigned To = 1 - Used = 1
Level 8   	...|...|...|...|...|...|...|...|id_value (9)
Level 9   	...|...|...|...|...|...|...|...|...|id_expression (10) - Symbol (Operator) Info: Type = operator_type_add
Level 10   	...|...|...|...|...|...|...|...|...|...|id_expression (10) - Symbol (Operator) Info: Type = operator_type_add
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_expression (10) - Symbol (Operator) Info: Type = operator_type_add
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_expression (10) - Symbol (Operator) Info: Type = operator_type_add
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_expression (10)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 15   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_i - Type = INTEGER - Assigned To = 1 - Used = 1
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 14   	...|...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_i - Type = INTEGER - Assigned To = 1 - Used = 1
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 13   	...|...|...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_i - Type = INTEGER - Assigned To = 1 - Used = 1
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 12   	...|...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_i - Type = INTEGER - Assigned To = 1 - Used = 1
Level 10   	...|...|...|...|...|...|...|...|...|...|id_term (11)
Level 11   	...|...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_i - Type = INTEGER - Assigned To = 1 - Used = 1
Level 5   	...|...|...|...|...|id_statement_list (6)
Level 6   	...|...|...|...|...|...|id_statement_list (6)
Level 7   	...|...|...|...|...|...|...|id_statement (7)
Level 8   	...|...|...|...|...|...|...|...|id_write_statement (12)
Level 9   	...|...|...|...|...|...|...|...|...|id_output_list (13)
Level 10   	...|...|...|...|...|...|...|...|...|...|id_value (9) - Symbol (Variable) Info: Identifier = spl_integer - Type = INTEGER - Assigned To = 1 - Used = 0
Level 6   	...|...|...|...|...|...|id_statement (7)
Level 7   	...|...|...|...|...|...|...|id_write_statement (12)
/*WARNING (28:2): spl_integer is declared and is assigned to but never used!*/
--31/10/2019----------------------------------------------------- 
C Code output for a.spl 
-- 0:49:54.06----------------------------------------------------- 
#include <stdio.h>

void _spl_flush_stdin()
{
	char c = -1;
	do
	{
		c = getchar();
	} while (c != '\n' && c != ' ' && c != EOF);
}

void spl_ProgA()
{
	printf("hello");
	printf("\n");
}

int main()
{
	spl_ProgA();
	return 0;
}
--31/10/2019----------------------------------------------------- 
C Code output for b.spl 
-- 0:49:54.31----------------------------------------------------- 
#include <stdio.h>

void _spl_flush_stdin()
{
	char c = -1;
	do
	{
		c = getchar();
	} while (c != '\n' && c != ' ' && c != EOF);
}

void spl_ProgB()
{
	int spl_a, spl_b;
	char spl_c;
	double spl_d, spl_e;

	scanf("%d", &spl_a);
	_spl_flush_stdin();
	scanf("%d", &spl_b);
	_spl_flush_stdin();
	if (spl_a > spl_b)
	{
		printf("A");
	}
	else
	{
		printf("B");
	}
	printf("\n");
	scanf("%lf", &spl_d);
	_spl_flush_stdin();
	spl_e = (spl_d * 2.300000);
	printf("%lf", spl_e);
	printf("\n");
	scanf("%c", &spl_c);
	_spl_flush_stdin();
	printf("%c", spl_c);
	printf("\n");
}

int main()
{
	spl_ProgB();
	return 0;
}
--31/10/2019----------------------------------------------------- 
C Code output for c.spl 
-- 0:49:54.57----------------------------------------------------- 
/*WARNING (9:17): spl_a is used before it has been assigned to, this will have unexpected consequences!*/
/*WARNING (10:18): spl_a is used before it has been assigned to, this will have unexpected consequences!*/
#include <stdio.h>

void _spl_flush_stdin()
{
	char c = -1;
	do
	{
		c = getchar();
	} while (c != '\n' && c != ' ' && c != EOF);
}

void spl_Prog3()
{
	int spl_a;

	int _spl_integer_by = 1;
	for (spl_a = 1; _spl_integer_by < 0 ? spl_a >= 13 : spl_a <= 13; spl_a += _spl_integer_by)
	{
		if (!(spl_a == 7))
		{
			printf("%d", spl_a);
			printf("\n");
		}
		_spl_integer_by = 1;
	}
	spl_a = 0;
	do
	{
		spl_a = (spl_a + 1);
		if (((!(spl_a == 6)) && (spl_a != 8)))
		{
			printf("%d", spl_a);
			printf("\n");
		}
	} while (spl_a < 14);
	spl_a = 0;
	while (spl_a < 12)
	{
		printf("%d", spl_a);
		spl_a = (spl_a + 1);
	};
	printf("\n");
}

int main()
{
	spl_Prog3();
	return 0;
}
/*WARNING (29:1): spl_a is declared and is assigned to but never used!*/
--31/10/2019----------------------------------------------------- 
C Code output for d.spl 
-- 0:49:54.82----------------------------------------------------- 
#include <stdio.h>

void _spl_flush_stdin()
{
	char c = -1;
	do
	{
		c = getchar();
	} while (c != '\n' && c != ' ' && c != EOF);
}

void spl_Prog4D()
{
	double spl_r1, spl_r2, spl_r3;

	spl_r1 = -2.400000;
	spl_r2 = -34.989000;
	spl_r3 = ((spl_r1 * spl_r2) / 7.400000);
	printf("%lf", spl_r3);
	printf("\n");
	scanf("%lf", &spl_r1);
	_spl_flush_stdin();
	spl_r3 = (spl_r1 + spl_r3);
	printf("%lf", spl_r3);
	printf("\n");
}

int main()
{
	spl_Prog4D();
	return 0;
}
--31/10/2019----------------------------------------------------- 
C Code output for e.spl 
-- 0:49:55.09----------------------------------------------------- 
#include <stdio.h>

void _spl_flush_stdin()
{
	char c = -1;
	do
	{
		c = getchar();
	} while (c != '\n' && c != ' ' && c != EOF);
}

void spl_ProgV()
{
	int spl_integer, spl_i;

	scanf("%d", &spl_integer);
	_spl_flush_stdin();
	if (((spl_integer <= 5) || (spl_integer >= 12)))
	{
		printf("%d", spl_integer);
	}
	printf("%d", (int)(36 - 1));
	printf("\n");
	int _spl_integer_by = -1;
	for (spl_integer = -1; _spl_integer_by < 0 ? spl_integer >= -5 : spl_integer <= -5; spl_integer += _spl_integer_by)
	{
		printf("%d", spl_integer);
		printf("\n");
		_spl_integer_by = -1;
	}
	spl_i = -1;
	_spl_integer_by = ((((spl_i * spl_i) * spl_i) * spl_i) * spl_i);
	for (spl_integer = ((spl_i * spl_i) * spl_i); _spl_integer_by < 0 ? spl_integer >= ((spl_i * spl_i) * ((((spl_i + spl_i) + spl_i) + spl_i) + spl_i)) : spl_integer <= ((spl_i * spl_i) * ((((spl_i + spl_i) + spl_i) + spl_i) + spl_i)); spl_integer += _spl_integer_by)
	{
		printf("%d", spl_integer);
		printf("\n");
		_spl_integer_by = ((((spl_i * spl_i) * spl_i) * spl_i) * spl_i);
	}
}

int main()
{
	spl_ProgV();
	return 0;
}
/*WARNING (29:1): spl_integer is declared and is assigned to but never used!*/
--31/10/2019----------------------------------------------------- 
Correct Execution output for a.spl  
-- 0:49:55.60----------------------------------------------------- 
hello
--31/10/2019----------------------------------------------------- 
Program B needs a visual inspection of floating point numbers - B 7.82 x
-- 0:49:56.21----------------------------------------------------- 
B
7.820000
x
--31/10/2019----------------------------------------------------- 
Correct Alternate Execution output for c.spl  
-- 0:49:57.45----------------------------------------------------- 
1
2
3
4
5
6
8
9
10
11
12
13
1
2
3
4
5
7
9
10
11
12
13
14
01234567891011
--31/10/2019----------------------------------------------------- 
Program D needs a visual inspection of floating point numbers 11.35 17.15 
-- 0:49:58.05----------------------------------------------------- 
11.347784
17.147784
--31/10/2019----------------------------------------------------- 
Correct Execution output for e.spl  
-- 0:49:58.71----------------------------------------------------- 
1234535
-1
-2
-3
-4
-5
-1
-2
-3
-4
-5
-- End of Program Output -------------------------------- 
